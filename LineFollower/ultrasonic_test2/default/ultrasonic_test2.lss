
ultrasonic_test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000378  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000378  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007d  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003ee  00000000  00000000  000004a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017c  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000045b  00000000  00000000  00000a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000129  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003ec  00000000  00000000  00001025  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  7a:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_command>:
	lcd_command(0x06);
	lcd_command(0x0c);
}
void lcd_command(unsigned char com)
	{
	lcd = com & 0xF0;		//send higher bit
  82:	28 2f       	mov	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	28 bb       	out	0x18, r18	; 24

	lcd &= ~(1<<rs); 		//rs =0
  88:	c0 98       	cbi	0x18, 0	; 24
	lcd &= ~(1<<rw);		//rw =0
  8a:	c1 98       	cbi	0x18, 1	; 24
	lcd |=(1<<en);			//en =1
  8c:	c2 9a       	sbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	2a ef       	ldi	r18, 0xFA	; 250
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	f9 01       	movw	r30, r18
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <lcd_command+0x12>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
  98:	c2 98       	cbi	0x18, 2	; 24
  9a:	f9 01       	movw	r30, r18
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_command+0x1a>
	_delay_ms(1);

	lcd = (com<<4) & 0xF0;	//send lower bit
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	44 e0       	ldi	r20, 0x04	; 4
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	4a 95       	dec	r20
  aa:	e1 f7       	brne	.-8      	; 0xa4 <lcd_command+0x22>
  ac:	88 bb       	out	0x18, r24	; 24

	lcd &= ~(1<<rs); 		//rs =0
  ae:	c0 98       	cbi	0x18, 0	; 24
	lcd &= ~(1<<rw);		//rw =0
  b0:	c1 98       	cbi	0x18, 1	; 24
	lcd |=(1<<en);			//en =1
  b2:	c2 9a       	sbi	0x18, 2	; 24
  b4:	c9 01       	movw	r24, r18
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcd_command+0x34>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
  ba:	c2 98       	cbi	0x18, 2	; 24
  bc:	c9 01       	movw	r24, r18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_command+0x3c>
	_delay_ms(1);
	}
  c2:	08 95       	ret

000000c4 <lcd_init>:
	return 0;
}

void lcd_init()
{
	lcd_command(0x02);
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 	lcd_command(0x28);
  ca:	88 e2       	ldi	r24, 0x28	; 40
  cc:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x06);
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x0c);
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
}
  dc:	08 95       	ret

000000de <lcd_data>:
	_delay_ms(1);
	}
void lcd_data(unsigned char value)
	{

	lcd =value & 0xF0;		//send higher bit
  de:	28 2f       	mov	r18, r24
  e0:	20 7f       	andi	r18, 0xF0	; 240
  e2:	28 bb       	out	0x18, r18	; 24

	lcd |= (1<<rs); 		//rs =1
  e4:	c0 9a       	sbi	0x18, 0	; 24
	lcd &= ~(1<<rw);		//rw =0
  e6:	c1 98       	cbi	0x18, 1	; 24
	lcd |=(1<<en);			//en =1
  e8:	c2 9a       	sbi	0x18, 2	; 24
  ea:	2a ef       	ldi	r18, 0xFA	; 250
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	f9 01       	movw	r30, r18
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_data+0x12>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
  f4:	c2 98       	cbi	0x18, 2	; 24
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_data+0x1a>
	_delay_ms(1);


	lcd =(value<<4) & 0xF0;	//send lower bit
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	54 e0       	ldi	r21, 0x04	; 4
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	5a 95       	dec	r21
 106:	e1 f7       	brne	.-8      	; 0x100 <lcd_data+0x22>
 108:	88 bb       	out	0x18, r24	; 24

	lcd |= (1<<rs); 		//rs =1
 10a:	c0 9a       	sbi	0x18, 0	; 24
	lcd &= ~(1<<rw);		//rw =0
 10c:	c1 98       	cbi	0x18, 1	; 24
	lcd |=(1<<en);			//en =1
 10e:	c2 9a       	sbi	0x18, 2	; 24
 110:	c9 01       	movw	r24, r18
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_data+0x34>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
 116:	c2 98       	cbi	0x18, 2	; 24
 118:	c9 01       	movw	r24, r18
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_data+0x3c>
	_delay_ms(1);
	}
 11e:	08 95       	ret

00000120 <lcd_string>:

void lcd_string(unsigned char *str)
{
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
 128:	10 e0       	ldi	r17, 0x00	; 0
 12a:	03 c0       	rjmp	.+6      	; 0x132 <lcd_string+0x12>
	char i=0;
	while(str[i]!='\0')
	{
	lcd_data(str[i]);
 12c:	0e 94 6f 00 	call	0xde	; 0xde <lcd_data>
	i++;
 130:	1f 5f       	subi	r17, 0xFF	; 255
	}

void lcd_string(unsigned char *str)
{
	char i=0;
	while(str[i]!='\0')
 132:	fe 01       	movw	r30, r28
 134:	e1 0f       	add	r30, r17
 136:	f1 1d       	adc	r31, r1
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	b9 f7       	brne	.-18     	; 0x12c <lcd_string+0xc>
	{
	lcd_data(str[i]);
	i++;
	}
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	08 95       	ret

00000146 <lcd_number>:

void lcd_number(unsigned int value)
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	unsigned int d=0;
	lcd_command(0x04);	//auto decrement mode
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>

	if(value==0)
 152:	20 97       	sbiw	r28, 0x00	; 0
 154:	91 f4       	brne	.+36     	; 0x17a <lcd_number+0x34>
	lcd_data(value+48);
 156:	80 e3       	ldi	r24, 0x30	; 48
 158:	0e 94 6f 00 	call	0xde	; 0xde <lcd_data>
 15c:	0e c0       	rjmp	.+28     	; 0x17a <lcd_number+0x34>

	while(value!=0)
	{
	d=value%10;
	lcd_data(d+48);
 15e:	ce 01       	movw	r24, r28
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	0e 94 a6 01 	call	0x34c	; 0x34c <__udivmodhi4>
 168:	80 5d       	subi	r24, 0xD0	; 208
 16a:	0e 94 6f 00 	call	0xde	; 0xde <lcd_data>
	value=value/10;
 16e:	ce 01       	movw	r24, r28
 170:	6a e0       	ldi	r22, 0x0A	; 10
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	0e 94 a6 01 	call	0x34c	; 0x34c <__udivmodhi4>
 178:	eb 01       	movw	r28, r22
	lcd_command(0x04);	//auto decrement mode

	if(value==0)
	lcd_data(value+48);

	while(value!=0)
 17a:	20 97       	sbiw	r28, 0x00	; 0
 17c:	81 f7       	brne	.-32     	; 0x15e <lcd_number+0x18>
	{
	d=value%10;
	lcd_data(d+48);
	value=value/10;
	}
	lcd_command(0x06);	//auto increment mode
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <adc_init>:

void adc_init()
{
	ADMUX = 0B01000000;//(1<<REFS0);// | (1<<REFS1);
 18a:	80 e4       	ldi	r24, 0x40	; 64
 18c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = ((1<<ADEN) | (1<<ADPS2)| (1<<ADPS1)| (1<<ADPS0));
 18e:	87 e8       	ldi	r24, 0x87	; 135
 190:	86 b9       	out	0x06, r24	; 6
	}
 192:	08 95       	ret

00000194 <adc_read>:
unsigned int adc_read(unsigned char channel)
{	
	
	ADMUX = 0x40|channel; 
 194:	80 64       	ori	r24, 0x40	; 64
 196:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 198:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
 19a:	34 9b       	sbis	0x06, 4	; 6
 19c:	fe cf       	rjmp	.-4      	; 0x19a <adc_read+0x6>

	ADCSRA |= (1<<ADIF);
 19e:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
 1a0:	24 b1       	in	r18, 0x04	; 4
 1a2:	35 b1       	in	r19, 0x05	; 5
}
 1a4:	c9 01       	movw	r24, r18
 1a6:	08 95       	ret

000001a8 <main>:
void lcd_string(unsigned char *str);
void lcd_number(unsigned int);
void adc_init();
unsigned int adc_read(unsigned char);
int main()
{	
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
	DDRA = 0x00;
 1b0:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0XFF;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
 1b6:	81 bb       	out	0x11, r24	; 17
	
	unsigned int dis=0;

	lcd_init();
 1b8:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_init>
	lcd_command(0x06);	//auto increment mode
}

void adc_init()
{
	ADMUX = 0B01000000;//(1<<REFS0);// | (1<<REFS1);
 1bc:	80 e4       	ldi	r24, 0x40	; 64
 1be:	87 b9       	out	0x07, r24	; 7
	ADCSRA = ((1<<ADEN) | (1<<ADPS2)| (1<<ADPS1)| (1<<ADPS0));
 1c0:	87 e8       	ldi	r24, 0x87	; 135
 1c2:	86 b9       	out	0x06, r24	; 6
 1c4:	08 ea       	ldi	r16, 0xA8	; 168
 1c6:	11 e6       	ldi	r17, 0x61	; 97
	lcd_init();
	adc_init();
	//trigger();
	while(1)
	{
	lcd_command(0x80);
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_string("Distance:       ");
 1ce:	80 e6       	ldi	r24, 0x60	; 96
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 90 00 	call	0x120	; 0x120 <lcd_string>
	dis=adc_read(0);
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 ca 00 	call	0x194	; 0x194 <adc_read>
 1dc:	9c 01       	movw	r18, r24
	10cm adc value is 120
	5cm adc value is 280
	0cm adc value is 970
	*/

	if((dis>=60) && (dis<65))
 1de:	cc 97       	sbiw	r24, 0x3c	; 60
 1e0:	05 97       	sbiw	r24, 0x05	; 5
 1e2:	18 f4       	brcc	.+6      	; 0x1ea <main+0x42>
 1e4:	c4 e1       	ldi	r28, 0x14	; 20
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	9a c0       	rjmp	.+308    	; 0x31e <main+0x176>
	dis=20;
	else if((dis>=65) && (dis<70))
 1ea:	c9 01       	movw	r24, r18
 1ec:	81 54       	subi	r24, 0x41	; 65
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	05 97       	sbiw	r24, 0x05	; 5
 1f2:	18 f4       	brcc	.+6      	; 0x1fa <main+0x52>
 1f4:	c3 e1       	ldi	r28, 0x13	; 19
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	92 c0       	rjmp	.+292    	; 0x31e <main+0x176>
	dis=19;
	else if((dis>=70) && (dis<75))
 1fa:	c9 01       	movw	r24, r18
 1fc:	86 54       	subi	r24, 0x46	; 70
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	05 97       	sbiw	r24, 0x05	; 5
 202:	18 f4       	brcc	.+6      	; 0x20a <main+0x62>
 204:	c2 e1       	ldi	r28, 0x12	; 18
 206:	d0 e0       	ldi	r29, 0x00	; 0
 208:	8a c0       	rjmp	.+276    	; 0x31e <main+0x176>
	dis=18;
	else if((dis>=75) && (dis<80))
 20a:	c9 01       	movw	r24, r18
 20c:	8b 54       	subi	r24, 0x4B	; 75
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	05 97       	sbiw	r24, 0x05	; 5
 212:	18 f4       	brcc	.+6      	; 0x21a <main+0x72>
 214:	c1 e1       	ldi	r28, 0x11	; 17
 216:	d0 e0       	ldi	r29, 0x00	; 0
 218:	82 c0       	rjmp	.+260    	; 0x31e <main+0x176>
	dis=17;
	else if((dis>=80) && (dis<85))
 21a:	c9 01       	movw	r24, r18
 21c:	80 55       	subi	r24, 0x50	; 80
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	05 97       	sbiw	r24, 0x05	; 5
 222:	18 f4       	brcc	.+6      	; 0x22a <main+0x82>
 224:	c0 e1       	ldi	r28, 0x10	; 16
 226:	d0 e0       	ldi	r29, 0x00	; 0
 228:	7a c0       	rjmp	.+244    	; 0x31e <main+0x176>
	dis=16;
	else if((dis>=85) && (dis<92))
 22a:	c9 01       	movw	r24, r18
 22c:	85 55       	subi	r24, 0x55	; 85
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	07 97       	sbiw	r24, 0x07	; 7
 232:	18 f4       	brcc	.+6      	; 0x23a <main+0x92>
 234:	cf e0       	ldi	r28, 0x0F	; 15
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	72 c0       	rjmp	.+228    	; 0x31e <main+0x176>
	dis=15;
	else if((dis>=92) && (dis<99))
 23a:	c9 01       	movw	r24, r18
 23c:	8c 55       	subi	r24, 0x5C	; 92
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	07 97       	sbiw	r24, 0x07	; 7
 242:	18 f4       	brcc	.+6      	; 0x24a <main+0xa2>
 244:	ce e0       	ldi	r28, 0x0E	; 14
 246:	d0 e0       	ldi	r29, 0x00	; 0
 248:	6a c0       	rjmp	.+212    	; 0x31e <main+0x176>
	dis=14;
	else if((dis>=99) && (dis<96))
	dis=13;
	else if((dis>=96) && (dis<113))
 24a:	c9 01       	movw	r24, r18
 24c:	80 56       	subi	r24, 0x60	; 96
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	41 97       	sbiw	r24, 0x11	; 17
 252:	18 f4       	brcc	.+6      	; 0x25a <main+0xb2>
 254:	cc e0       	ldi	r28, 0x0C	; 12
 256:	d0 e0       	ldi	r29, 0x00	; 0
 258:	62 c0       	rjmp	.+196    	; 0x31e <main+0x176>
	dis=12;
	else if((dis>=113) && (dis<120))
 25a:	c9 01       	movw	r24, r18
 25c:	81 57       	subi	r24, 0x71	; 113
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	07 97       	sbiw	r24, 0x07	; 7
 262:	18 f4       	brcc	.+6      	; 0x26a <main+0xc2>
 264:	cb e0       	ldi	r28, 0x0B	; 11
 266:	d0 e0       	ldi	r29, 0x00	; 0
 268:	5a c0       	rjmp	.+180    	; 0x31e <main+0x176>
	dis=11;
	else if((dis>=120) && (dis<152))
 26a:	c9 01       	movw	r24, r18
 26c:	88 57       	subi	r24, 0x78	; 120
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	80 97       	sbiw	r24, 0x20	; 32
 272:	18 f4       	brcc	.+6      	; 0x27a <main+0xd2>
 274:	ca e0       	ldi	r28, 0x0A	; 10
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	52 c0       	rjmp	.+164    	; 0x31e <main+0x176>
	dis=10;
	else if((dis>=152) && (dis<184))
 27a:	c9 01       	movw	r24, r18
 27c:	88 59       	subi	r24, 0x98	; 152
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	80 97       	sbiw	r24, 0x20	; 32
 282:	18 f4       	brcc	.+6      	; 0x28a <main+0xe2>
 284:	c9 e0       	ldi	r28, 0x09	; 9
 286:	d0 e0       	ldi	r29, 0x00	; 0
 288:	4a c0       	rjmp	.+148    	; 0x31e <main+0x176>
	dis=9;
	else if((dis>=184) && (dis<216))
 28a:	c9 01       	movw	r24, r18
 28c:	88 5b       	subi	r24, 0xB8	; 184
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	80 97       	sbiw	r24, 0x20	; 32
 292:	18 f4       	brcc	.+6      	; 0x29a <main+0xf2>
 294:	c8 e0       	ldi	r28, 0x08	; 8
 296:	d0 e0       	ldi	r29, 0x00	; 0
 298:	42 c0       	rjmp	.+132    	; 0x31e <main+0x176>
	dis=8;
	else if((dis>=216) && (dis<248))
 29a:	c9 01       	movw	r24, r18
 29c:	88 5d       	subi	r24, 0xD8	; 216
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	80 97       	sbiw	r24, 0x20	; 32
 2a2:	18 f4       	brcc	.+6      	; 0x2aa <main+0x102>
 2a4:	c7 e0       	ldi	r28, 0x07	; 7
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
 2a8:	3a c0       	rjmp	.+116    	; 0x31e <main+0x176>
	dis=7;
	else if((dis>=248) && (dis<280))
 2aa:	c9 01       	movw	r24, r18
 2ac:	88 5f       	subi	r24, 0xF8	; 248
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	80 97       	sbiw	r24, 0x20	; 32
 2b2:	18 f4       	brcc	.+6      	; 0x2ba <main+0x112>
 2b4:	c6 e0       	ldi	r28, 0x06	; 6
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
 2b8:	32 c0       	rjmp	.+100    	; 0x31e <main+0x176>
	dis=6;
	else if((dis>=280) && (dis<418))
 2ba:	c9 01       	movw	r24, r18
 2bc:	88 51       	subi	r24, 0x18	; 24
 2be:	91 40       	sbci	r25, 0x01	; 1
 2c0:	8a 38       	cpi	r24, 0x8A	; 138
 2c2:	91 05       	cpc	r25, r1
 2c4:	18 f4       	brcc	.+6      	; 0x2cc <main+0x124>
 2c6:	c5 e0       	ldi	r28, 0x05	; 5
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
 2ca:	29 c0       	rjmp	.+82     	; 0x31e <main+0x176>
	dis=5;
	else if((dis>=418) && (dis<556))
 2cc:	c9 01       	movw	r24, r18
 2ce:	82 5a       	subi	r24, 0xA2	; 162
 2d0:	91 40       	sbci	r25, 0x01	; 1
 2d2:	8a 38       	cpi	r24, 0x8A	; 138
 2d4:	91 05       	cpc	r25, r1
 2d6:	18 f4       	brcc	.+6      	; 0x2de <main+0x136>
 2d8:	c4 e0       	ldi	r28, 0x04	; 4
 2da:	d0 e0       	ldi	r29, 0x00	; 0
 2dc:	20 c0       	rjmp	.+64     	; 0x31e <main+0x176>
	dis=4;
	else if((dis>=556) && (dis<694))
 2de:	c9 01       	movw	r24, r18
 2e0:	8c 52       	subi	r24, 0x2C	; 44
 2e2:	92 40       	sbci	r25, 0x02	; 2
 2e4:	8a 38       	cpi	r24, 0x8A	; 138
 2e6:	91 05       	cpc	r25, r1
 2e8:	18 f4       	brcc	.+6      	; 0x2f0 <main+0x148>
 2ea:	c3 e0       	ldi	r28, 0x03	; 3
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
 2ee:	17 c0       	rjmp	.+46     	; 0x31e <main+0x176>
	dis=3;
	else if((dis>=694) && (dis<832))
 2f0:	c9 01       	movw	r24, r18
 2f2:	86 5b       	subi	r24, 0xB6	; 182
 2f4:	92 40       	sbci	r25, 0x02	; 2
 2f6:	8a 38       	cpi	r24, 0x8A	; 138
 2f8:	91 05       	cpc	r25, r1
 2fa:	18 f4       	brcc	.+6      	; 0x302 <main+0x15a>
 2fc:	c2 e0       	ldi	r28, 0x02	; 2
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	0e c0       	rjmp	.+28     	; 0x31e <main+0x176>
	dis=2;
	else if((dis>=832) && (dis<=950))
 302:	c9 01       	movw	r24, r18
 304:	80 54       	subi	r24, 0x40	; 64
 306:	93 40       	sbci	r25, 0x03	; 3
 308:	87 37       	cpi	r24, 0x77	; 119
 30a:	91 05       	cpc	r25, r1
 30c:	18 f4       	brcc	.+6      	; 0x314 <main+0x16c>
 30e:	c1 e0       	ldi	r28, 0x01	; 1
 310:	d0 e0       	ldi	r29, 0x00	; 0
 312:	05 c0       	rjmp	.+10     	; 0x31e <main+0x176>
	dis=1;
	else if((dis>950))
 314:	27 5b       	subi	r18, 0xB7	; 183
 316:	33 40       	sbci	r19, 0x03	; 3
 318:	98 f0       	brcs	.+38     	; 0x340 <main+0x198>
 31a:	c0 e0       	ldi	r28, 0x00	; 0
 31c:	d0 e0       	ldi	r29, 0x00	; 0
	lcd_command(0x8b);
	lcd_string("error  ");
	}
	else
	{
	lcd_command(0x8d);
 31e:	8d e8       	ldi	r24, 0x8D	; 141
 320:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_number(dis);
 324:	ce 01       	movw	r24, r28
 326:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_number>
	lcd_command(0x8e);
 32a:	8e e8       	ldi	r24, 0x8E	; 142
 32c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_string("cm");
 330:	81 e7       	ldi	r24, 0x71	; 113
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 90 00 	call	0x120	; 0x120 <lcd_string>
 338:	c8 01       	movw	r24, r16
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <main+0x192>
 33e:	44 cf       	rjmp	.-376    	; 0x1c8 <main+0x20>
	dis=out_of_range;


	if(dis==out_of_range)
	{
	lcd_command(0x8b);
 340:	8b e8       	ldi	r24, 0x8B	; 139
 342:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_string("error  ");
 346:	84 e7       	ldi	r24, 0x74	; 116
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	f4 cf       	rjmp	.-24     	; 0x334 <main+0x18c>

0000034c <__udivmodhi4>:
 34c:	aa 1b       	sub	r26, r26
 34e:	bb 1b       	sub	r27, r27
 350:	51 e1       	ldi	r21, 0x11	; 17
 352:	07 c0       	rjmp	.+14     	; 0x362 <__udivmodhi4_ep>

00000354 <__udivmodhi4_loop>:
 354:	aa 1f       	adc	r26, r26
 356:	bb 1f       	adc	r27, r27
 358:	a6 17       	cp	r26, r22
 35a:	b7 07       	cpc	r27, r23
 35c:	10 f0       	brcs	.+4      	; 0x362 <__udivmodhi4_ep>
 35e:	a6 1b       	sub	r26, r22
 360:	b7 0b       	sbc	r27, r23

00000362 <__udivmodhi4_ep>:
 362:	88 1f       	adc	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	5a 95       	dec	r21
 368:	a9 f7       	brne	.-22     	; 0x354 <__udivmodhi4_loop>
 36a:	80 95       	com	r24
 36c:	90 95       	com	r25
 36e:	bc 01       	movw	r22, r24
 370:	cd 01       	movw	r24, r26
 372:	08 95       	ret

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>

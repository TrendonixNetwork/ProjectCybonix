
ultrasonic_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001b0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000048  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000280  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015f  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000220  00000000  00000000  000005f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000139  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000003e  00000000  00000000  000009a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000009df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  74:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <InitADC>:

volatile uint32_t r=0;

void InitADC()   // initiating adc
{
	ADMUX=(1<<REFS0);                                  	// For Aref=AVcc;
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);    //Prescalar div factor =128
  80:	87 e8       	ldi	r24, 0x87	; 135
  82:	86 b9       	out	0x06, r24	; 6

}
  84:	08 95       	ret

00000086 <adc_read>:

uint16_t adc_read(uint8_t ch)
{
  
  ch =ch& 0b00000111;  
  ADMUX|=ch; 
  86:	97 b1       	in	r25, 0x07	; 7
  88:	87 70       	andi	r24, 0x07	; 7
  8a:	89 2b       	or	r24, r25
  8c:	87 b9       	out	0x07, r24	; 7
 
  // start single convertion
  // write ’1' to ADSC
  ADCSRA|=(1<<ADSC);
  8e:	36 9a       	sbi	0x06, 6	; 6
 
  while(!(ADCSRA & (1<<ADIF)));
  90:	34 9b       	sbis	0x06, 4	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <adc_read+0xa>
 
	ADCSRA|=(1<<ADIF);
  94:	34 9a       	sbi	0x06, 4	; 6

  return (ADC);
  96:	24 b1       	in	r18, 0x04	; 4
  98:	35 b1       	in	r19, 0x05	; 5
}
  9a:	c9 01       	movw	r24, r18
  9c:	08 95       	ret

0000009e <send_trig>:


void send_trig() // function to send out signal through trig pin
{

	PORTA=0x00;
  9e:	1b ba       	out	0x1b, r1	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <send_trig+0x4>
	_delay_us(5);

    PORTA=0xf0;
  a6:	80 ef       	ldi	r24, 0xF0	; 240
  a8:	8b bb       	out	0x1b, r24	; 27
	r=1;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	80 93 60 00 	sts	0x0060, r24
  b6:	90 93 61 00 	sts	0x0061, r25
  ba:	a0 93 62 00 	sts	0x0062, r26
  be:	b0 93 63 00 	sts	0x0063, r27
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <send_trig+0x26>
	_delay_us(10);
    PORTA=0x00;
  c8:	1b ba       	out	0x1b, r1	; 27
	

}
  ca:	08 95       	ret

000000cc <main>:
void main()

{
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	int s1=0;	

    DDRA = 0xf0;
  d8:	80 ef       	ldi	r24, 0xF0	; 240
  da:	8a bb       	out	0x1a, r24	; 26
	
	DDRB = 0xff;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	87 bb       	out	0x17, r24	; 23

volatile uint32_t r=0;

void InitADC()   // initiating adc
{
	ADMUX=(1<<REFS0);                                  	// For Aref=AVcc;
  e0:	80 e4       	ldi	r24, 0x40	; 64
  e2:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);    //Prescalar div factor =128
  e4:	87 e8       	ldi	r24, 0x87	; 135
  e6:	86 b9       	out	0x06, r24	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e8:	08 e9       	ldi	r16, 0x98	; 152
  ea:	1a e3       	ldi	r17, 0x3A	; 58
	{
	PORTB=0b00100000;
	s1=0;
	}
	else
	PORTB=0b10000000;
  ec:	90 e8       	ldi	r25, 0x80	; 128
  ee:	e9 2e       	mov	r14, r25
	_delay_ms(60);
	send_trig();
	
	if(s1==0x01)
	{
	PORTB=0b00100000;
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	f8 2e       	mov	r15, r24
	

	while(1)
	{

	s1=(PINA&0x01);
  f4:	89 b3       	in	r24, 0x19	; 25
  f6:	c8 2f       	mov	r28, r24
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	c1 70       	andi	r28, 0x01	; 1
  fc:	d0 70       	andi	r29, 0x00	; 0

	adc_result0 = adc_read(0);      // read adc value at PA0
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 43 00 	call	0x86	; 0x86 <adc_read>
    adc_result1 = adc_read(7);      // read adc value at PA7
 104:	87 e0       	ldi	r24, 0x07	; 7
 106:	0e 94 43 00 	call	0x86	; 0x86 <adc_read>
	

	 if(r==0)
 10a:	80 91 60 00 	lds	r24, 0x0060
 10e:	90 91 61 00 	lds	r25, 0x0061
 112:	a0 91 62 00 	lds	r26, 0x0062
 116:	b0 91 63 00 	lds	r27, 0x0063
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	a1 05       	cpc	r26, r1
 11e:	b1 05       	cpc	r27, r1
 120:	49 f7       	brne	.-46     	; 0xf4 <main+0x28>
 122:	c8 01       	movw	r24, r16
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x58>
	 {	
	
	_delay_ms(60);
	send_trig();
 128:	0e 94 4f 00 	call	0x9e	; 0x9e <send_trig>
	
	if(s1==0x01)
 12c:	21 97       	sbiw	r28, 0x01	; 1
 12e:	11 f4       	brne	.+4      	; 0x134 <main+0x68>
	{
	PORTB=0b00100000;
 130:	f8 ba       	out	0x18, r15	; 24
 132:	e0 cf       	rjmp	.-64     	; 0xf4 <main+0x28>
	s1=0;
	}
	else
	PORTB=0b10000000;
 134:	e8 ba       	out	0x18, r14	; 24
 136:	de cf       	rjmp	.-68     	; 0xf4 <main+0x28>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>


GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000b88  00000c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006e  0080006e  00000c2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be1  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000751  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000644  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000445  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000692  00000000  00000000  00002c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000032c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 96 02 	call	0x52c	; 0x52c <main>
  8a:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitADC>:
//#include<motor.h>
//#include<led.h>

void InitADC()
{
	ADMUX=(1<<REFS0);                                  	// For Aref=AVcc;
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);    //Prescalar div factor =128
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
  9a:	08 95       	ret

0000009c <ReadADC>:
*/
uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	ADMUX&=0b11100000;
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	90 7e       	andi	r25, 0xE0	; 224
  a0:	97 b9       	out	0x07, r25	; 7
	ADMUX|=ch;
  a2:	97 b1       	in	r25, 0x07	; 7

*/
uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
  a4:	87 70       	andi	r24, 0x07	; 7
	ADMUX&=0b11100000;
	ADMUX|=ch;
  a6:	98 2b       	or	r25, r24
  a8:	97 b9       	out	0x07, r25	; 7

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  aa:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  ac:	34 9b       	sbis	0x06, 4	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <ReadADC+0x10>

	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in datasheets.
	//The code writes '1' but it result in setting bit to '0' !!!

	ADCSRA|=(1<<ADIF);
  b0:	34 9a       	sbi	0x06, 4	; 6

	return(ADC);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	95 b1       	in	r25, 0x05	; 5
}
  b6:	08 95       	ret

000000b8 <MotorInit>:
{
	#ifdef XBOARD2

	//set up pwm for speed control

	TCCR1A=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM10);
  b8:	81 ea       	ldi	r24, 0xA1	; 161
  ba:	8f bd       	out	0x2f, r24	; 47

	//clk=fcpu/64

	TCCR1B=(1<<CS11)|(1<<CS10);
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	8e bd       	out	0x2e, r24	; 46

	//Set the corresponding port pin to output

	DDR(OC1A_PORT)|=(1<<OC1A_PIN);
  c0:	b9 9a       	sbi	0x17, 1	; 23
	DDR(OC1B_PORT)|=(1<<OC1B_PIN);
  c2:	ba 9a       	sbi	0x17, 2	; 23

	//Set the direction control PINs to OUT
	DDRD|=0X0F;	//PC0 to PC3 as output
  c4:	81 b3       	in	r24, 0x11	; 17
  c6:	8f 60       	ori	r24, 0x0F	; 15
  c8:	81 bb       	out	0x11, r24	; 17
  ca:	08 95       	ret

000000cc <MotorA>:
	Other Constants for direction are
	MOTOR_CCW and MOTOR_STOP

***********************************************************/
void MotorA(uint8_t dir,uint8_t speed)//LEFT
{
  cc:	cf 93       	push	r28
	#ifdef XBOARD2
	//Direction
	if(dir == MOTOR_STOP)
  ce:	81 11       	cpse	r24, r1
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <MotorA+0xc>
	{
		PORTD&=(~(1<<PD0));
  d2:	90 98       	cbi	0x12, 0	; 18
		PORTD&=(~(1<<PD1));
  d4:	91 98       	cbi	0x12, 1	; 18
  d6:	09 c0       	rjmp	.+18     	; 0xea <MotorA+0x1e>
	}

	else if(dir == MOTOR_CCW)
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	19 f4       	brne	.+6      	; 0xe2 <MotorA+0x16>
	{
		PORTD&=(~(1<<PD0));
  dc:	90 98       	cbi	0x12, 0	; 18
		PORTD|=(1<<PD1);
  de:	91 9a       	sbi	0x12, 1	; 18
  e0:	04 c0       	rjmp	.+8      	; 0xea <MotorA+0x1e>
	}
	else if(dir == MOTOR_CW)
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	11 f4       	brne	.+4      	; 0xea <MotorA+0x1e>
	{
		PORTD&=(~(1<<PD1));
  e6:	91 98       	cbi	0x12, 1	; 18
		PORTD|=(1<<PD0);
  e8:	90 9a       	sbi	0x12, 0	; 18
	}

	//Speed
	uint8_t sreg=SREG;
  ea:	cf b7       	in	r28, 0x3f	; 63

	cli();
  ec:	f8 94       	cli

	OCR1A=(uint8_t)(((float)speed/255.0)*ROBO_SPEED);
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 9e 04 	call	0x93c	; 0x93c <__floatunsisf>
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	4f e7       	ldi	r20, 0x7F	; 127
  fe:	53 e4       	ldi	r21, 0x43	; 67
 100:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__divsf3>
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	48 e4       	ldi	r20, 0x48	; 72
 10a:	53 e4       	ldi	r21, 0x43	; 67
 10c:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 110:	0e 94 6f 04 	call	0x8de	; 0x8de <__fixunssfsi>
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	7b bd       	out	0x2b, r23	; 43
 118:	6a bd       	out	0x2a, r22	; 42

	SREG=sreg;
 11a:	cf bf       	out	0x3f, r28	; 63

	//Speed
	OCR5AL=(uint8_t)(((float)speed/255.0)*ROBO_SPEED);
	#endif
	
}
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <MotorB>:
	Other Constants for direction are
	MOTOR_CCW and MOTOR_STOP

***********************************************************/
void MotorB(uint8_t dir,uint8_t speed)//RIGHT
{
 120:	cf 93       	push	r28
	#ifdef XBOARD2
	//Direction
	if(dir == MOTOR_STOP)
 122:	81 11       	cpse	r24, r1
 124:	03 c0       	rjmp	.+6      	; 0x12c <MotorB+0xc>
	{
		PORTD&=(~(1<<PD2));
 126:	92 98       	cbi	0x12, 2	; 18
		PORTD&=(~(1<<PD3));
 128:	93 98       	cbi	0x12, 3	; 18
 12a:	09 c0       	rjmp	.+18     	; 0x13e <MotorB+0x1e>
	}

	else if(dir == MOTOR_CCW)
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	19 f4       	brne	.+6      	; 0x136 <MotorB+0x16>
	{
		PORTD&=(~(1<<PD2));
 130:	92 98       	cbi	0x12, 2	; 18
		PORTD|=(1<<PD3);
 132:	93 9a       	sbi	0x12, 3	; 18
 134:	04 c0       	rjmp	.+8      	; 0x13e <MotorB+0x1e>
	}
	else if(dir == MOTOR_CW)
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	11 f4       	brne	.+4      	; 0x13e <MotorB+0x1e>
	{
		PORTD&=(~(1<<PD3));
 13a:	93 98       	cbi	0x12, 3	; 18
		PORTD|=(1<<PD2);
 13c:	92 9a       	sbi	0x12, 2	; 18
	}

	//Speed
	uint8_t sreg=SREG;
 13e:	cf b7       	in	r28, 0x3f	; 63

	cli();
 140:	f8 94       	cli

	OCR1B=(uint8_t)(((float)speed/255.0)*ROBO_SPEED);
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 9e 04 	call	0x93c	; 0x93c <__floatunsisf>
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	4f e7       	ldi	r20, 0x7F	; 127
 152:	53 e4       	ldi	r21, 0x43	; 67
 154:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__divsf3>
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	48 e4       	ldi	r20, 0x48	; 72
 15e:	53 e4       	ldi	r21, 0x43	; 67
 160:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 164:	0e 94 6f 04 	call	0x8de	; 0x8de <__fixunssfsi>
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	79 bd       	out	0x29, r23	; 41
 16c:	68 bd       	out	0x28, r22	; 40

	SREG=sreg;
 16e:	cf bf       	out	0x3f, r28	; 63
	}

	//Speed
	OCR5BL=(uint8_t)(((float)speed/255.0)*ROBO_SPEED);
	#endif
}
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <LEDInit>:


void LEDInit()
{
	//Make i/o pins as output type
	DDRD|=(0Xf0);
 174:	81 b3       	in	r24, 0x11	; 17
 176:	80 6f       	ori	r24, 0xF0	; 240
 178:	81 bb       	out	0x11, r24	; 17
	DDRB|=(1<<PB0);
 17a:	b8 9a       	sbi	0x17, 0	; 23
	
	//Make them high to turn off led.
	PORTD|=(0Xf0);
 17c:	82 b3       	in	r24, 0x12	; 18
 17e:	80 6f       	ori	r24, 0xF0	; 240
 180:	82 bb       	out	0x12, r24	; 18
	PORTB|=(1<<PB0);
 182:	c0 9a       	sbi	0x18, 0	; 24
 184:	08 95       	ret

00000186 <LEDOff>:
}

void LEDOff(uint8_t id)
{
	if(id>5) return;
 186:	86 30       	cpi	r24, 0x06	; 6
 188:	b0 f4       	brcc	.+44     	; 0x1b6 <LEDOff+0x30>
	
	id=6-id;
 18a:	96 e0       	ldi	r25, 0x06	; 6
 18c:	98 1b       	sub	r25, r24
 18e:	89 2f       	mov	r24, r25
	
	if(id==1)
 190:	91 30       	cpi	r25, 0x01	; 1
 192:	11 f4       	brne	.+4      	; 0x198 <LEDOff+0x12>
	{
		PORTB|=(1<<PB0);
 194:	c0 9a       	sbi	0x18, 0	; 24
 196:	08 95       	ret
	}
	else if(id<=5)
 198:	96 30       	cpi	r25, 0x06	; 6
 19a:	68 f4       	brcc	.+26     	; 0x1b6 <LEDOff+0x30>
	{
		PORTD|=(1<<(2+id));
 19c:	42 b3       	in	r20, 0x12	; 18
 19e:	8e 5f       	subi	r24, 0xFE	; 254
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	b9 01       	movw	r22, r18
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <LEDOff+0x26>
 1a8:	66 0f       	add	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	8a 95       	dec	r24
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <LEDOff+0x22>
 1b0:	cb 01       	movw	r24, r22
 1b2:	84 2b       	or	r24, r20
 1b4:	82 bb       	out	0x12, r24	; 18
 1b6:	08 95       	ret

000001b8 <LEDOn>:
	}
}

void LEDOn(uint8_t id)
{
	if(id>5) return;
 1b8:	86 30       	cpi	r24, 0x06	; 6
 1ba:	b8 f4       	brcc	.+46     	; 0x1ea <LEDOn+0x32>
	
	id=6-id;
 1bc:	96 e0       	ldi	r25, 0x06	; 6
 1be:	98 1b       	sub	r25, r24
 1c0:	89 2f       	mov	r24, r25
	
	if(id==1)
 1c2:	91 30       	cpi	r25, 0x01	; 1
 1c4:	11 f4       	brne	.+4      	; 0x1ca <LEDOn+0x12>
	{
		PORTB&=~(1<<PB0);
 1c6:	c0 98       	cbi	0x18, 0	; 24
 1c8:	08 95       	ret
	}
	else if(id<=5)
 1ca:	96 30       	cpi	r25, 0x06	; 6
 1cc:	70 f4       	brcc	.+28     	; 0x1ea <LEDOn+0x32>
	{
		PORTD&=~(1<<(2+id));
 1ce:	42 b3       	in	r20, 0x12	; 18
 1d0:	8e 5f       	subi	r24, 0xFE	; 254
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	b9 01       	movw	r22, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <LEDOn+0x26>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	8a 95       	dec	r24
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <LEDOn+0x22>
 1e2:	cb 01       	movw	r24, r22
 1e4:	80 95       	com	r24
 1e6:	84 23       	and	r24, r20
 1e8:	82 bb       	out	0x12, r24	; 18
 1ea:	08 95       	ret

000001ec <DelayMs>:
}

void DelayMs(uint8_t ms)
{
	uint8_t i;
	for(i=0;i<ms;i++)
 1ec:	88 23       	and	r24, r24
 1ee:	51 f0       	breq	.+20     	; 0x204 <DelayMs+0x18>
 1f0:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	e9 ef       	ldi	r30, 0xF9	; 249
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <DelayMs+0xa>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <DelayMs+0x10>
 1fc:	00 00       	nop
 1fe:	9f 5f       	subi	r25, 0xFF	; 255
 200:	98 13       	cpse	r25, r24
 202:	f7 cf       	rjmp	.-18     	; 0x1f2 <DelayMs+0x6>
 204:	08 95       	ret

00000206 <PID>:
	}
}

//Implements PID control
float PID(float cur_value,float req_value)
{
 206:	4f 92       	push	r4
 208:	5f 92       	push	r5
 20a:	6f 92       	push	r6
 20c:	7f 92       	push	r7
 20e:	8f 92       	push	r8
 210:	9f 92       	push	r9
 212:	af 92       	push	r10
 214:	bf 92       	push	r11
 216:	cf 92       	push	r12
 218:	df 92       	push	r13
 21a:	ef 92       	push	r14
 21c:	ff 92       	push	r15
 21e:	6b 01       	movw	r12, r22
 220:	7c 01       	movw	r14, r24
 222:	ca 01       	movw	r24, r20
 224:	b9 01       	movw	r22, r18
	float pid;
	float error;

	error = req_value - cur_value;
 226:	a7 01       	movw	r20, r14
 228:	96 01       	movw	r18, r12
 22a:	0e 94 84 03 	call	0x708	; 0x708 <__subsf3>
 22e:	6b 01       	movw	r12, r22
 230:	7c 01       	movw	r14, r24
	pid = (pGain * error)  + (iGain * eInteg) + (dGain * (error - ePrev));
 232:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <eInteg>
 236:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <eInteg+0x1>
 23a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <eInteg+0x2>
 23e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <eInteg+0x3>
 242:	0e 94 a0 04 	call	0x940	; 0x940 <__floatsisf>
 246:	4b 01       	movw	r8, r22
 248:	5c 01       	movw	r10, r24
 24a:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <pGain>
 24e:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <pGain+0x1>
 252:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <pGain+0x2>
 256:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <pGain+0x3>
 25a:	c7 01       	movw	r24, r14
 25c:	b6 01       	movw	r22, r12
 25e:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 262:	2b 01       	movw	r4, r22
 264:	3c 01       	movw	r6, r24
 266:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <iGain>
 26a:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <iGain+0x1>
 26e:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <iGain+0x2>
 272:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <iGain+0x3>
 276:	c5 01       	movw	r24, r10
 278:	b4 01       	movw	r22, r8
 27a:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 27e:	9b 01       	movw	r18, r22
 280:	ac 01       	movw	r20, r24
 282:	c3 01       	movw	r24, r6
 284:	b2 01       	movw	r22, r4
 286:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 28a:	2b 01       	movw	r4, r22
 28c:	3c 01       	movw	r6, r24
 28e:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <__data_end>
 292:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <__data_end+0x1>
 296:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end+0x2>
 29a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x3>
 29e:	0e 94 a0 04 	call	0x940	; 0x940 <__floatsisf>
 2a2:	9b 01       	movw	r18, r22
 2a4:	ac 01       	movw	r20, r24
 2a6:	c7 01       	movw	r24, r14
 2a8:	b6 01       	movw	r22, r12
 2aa:	0e 94 84 03 	call	0x708	; 0x708 <__subsf3>
 2ae:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <dGain>
 2b2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <dGain+0x1>
 2b6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <dGain+0x2>
 2ba:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <dGain+0x3>
 2be:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 2c2:	9b 01       	movw	r18, r22
 2c4:	ac 01       	movw	r20, r24
 2c6:	c3 01       	movw	r24, r6
 2c8:	b2 01       	movw	r22, r4
 2ca:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 2ce:	2b 01       	movw	r4, r22
 2d0:	3c 01       	movw	r6, r24

	eInteg += error;                  // integral is simply a summation over time
 2d2:	a5 01       	movw	r20, r10
 2d4:	94 01       	movw	r18, r8
 2d6:	c7 01       	movw	r24, r14
 2d8:	b6 01       	movw	r22, r12
 2da:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 2de:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fixsfsi>
 2e2:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <eInteg>
 2e6:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <eInteg+0x1>
 2ea:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <eInteg+0x2>
 2ee:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <eInteg+0x3>
	ePrev = error;                    // save previous for derivative
 2f2:	c7 01       	movw	r24, r14
 2f4:	b6 01       	movw	r22, r12
 2f6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fixsfsi>
 2fa:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <__data_end>
 2fe:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <__data_end+0x1>
 302:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end+0x2>
 306:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x3>

	return pid;
}
 30a:	c3 01       	movw	r24, r6
 30c:	b2 01       	movw	r22, r4
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	cf 90       	pop	r12
 316:	bf 90       	pop	r11
 318:	af 90       	pop	r10
 31a:	9f 90       	pop	r9
 31c:	8f 90       	pop	r8
 31e:	7f 90       	pop	r7
 320:	6f 90       	pop	r6
 322:	5f 90       	pop	r5
 324:	4f 90       	pop	r4
 326:	08 95       	ret

00000328 <ReadSensors>:

float ReadSensors()
{
 328:	7f 92       	push	r7
 32a:	8f 92       	push	r8
 32c:	9f 92       	push	r9
 32e:	af 92       	push	r10
 330:	bf 92       	push	r11
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
	uint16_t	eright,right,middle,left,eleft;
	uint8_t		sensor1,sensor2, sensor3, sensor4,sensor5;
	
	float avgSensor = 0.0;
	
	eright=ReadADC(SENSOR5);
 342:	84 e0       	ldi	r24, 0x04	; 4
 344:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
	if(eright>SENSOR_THRES)//Right black line sensor
 348:	81 32       	cpi	r24, 0x21	; 33
 34a:	93 40       	sbci	r25, 0x03	; 3
 34c:	28 f0       	brcs	.+10     	; 0x358 <ReadSensors+0x30>
	{
		sensor5 = 1;
		LEDOn(5);
 34e:	85 e0       	ldi	r24, 0x05	; 5
 350:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LEDOn>
	float avgSensor = 0.0;
	
	eright=ReadADC(SENSOR5);
	if(eright>SENSOR_THRES)//Right black line sensor
	{
		sensor5 = 1;
 354:	01 e0       	ldi	r16, 0x01	; 1
 356:	04 c0       	rjmp	.+8      	; 0x360 <ReadSensors+0x38>
		LEDOn(5);
	}
	else
	{
		sensor5 = 0;
		LEDOff(5);
 358:	85 e0       	ldi	r24, 0x05	; 5
 35a:	0e 94 c3 00 	call	0x186	; 0x186 <LEDOff>
		sensor5 = 1;
		LEDOn(5);
	}
	else
	{
		sensor5 = 0;
 35e:	00 e0       	ldi	r16, 0x00	; 0
		LEDOff(5);
	}

	// Read analog inputs
	right=ReadADC(SENSOR4);
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
	if(right>SENSOR_THRES)//Right black line sensor
 366:	81 32       	cpi	r24, 0x21	; 33
 368:	93 40       	sbci	r25, 0x03	; 3
 36a:	30 f0       	brcs	.+12     	; 0x378 <ReadSensors+0x50>
	{
		sensor4 = 1;
		LEDOn(4);
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LEDOn>

	// Read analog inputs
	right=ReadADC(SENSOR4);
	if(right>SENSOR_THRES)//Right black line sensor
	{
		sensor4 = 1;
 372:	cc 24       	eor	r12, r12
 374:	c3 94       	inc	r12
 376:	04 c0       	rjmp	.+8      	; 0x380 <ReadSensors+0x58>
		LEDOn(4);
	}
	else
	{
		sensor4 = 0;
		LEDOff(4);
 378:	84 e0       	ldi	r24, 0x04	; 4
 37a:	0e 94 c3 00 	call	0x186	; 0x186 <LEDOff>
		sensor4 = 1;
		LEDOn(4);
	}
	else
	{
		sensor4 = 0;
 37e:	c1 2c       	mov	r12, r1
		LEDOff(4);
	}

	middle=ReadADC(SENSOR3);
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
	if(middle>SENSOR_THRES)// Middle black line sensor
 386:	81 32       	cpi	r24, 0x21	; 33
 388:	93 40       	sbci	r25, 0x03	; 3
 38a:	28 f0       	brcs	.+10     	; 0x396 <ReadSensors+0x6e>
	{
		sensor3 = 1;
		LEDOn(3);
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LEDOn>
	}

	middle=ReadADC(SENSOR3);
	if(middle>SENSOR_THRES)// Middle black line sensor
	{
		sensor3 = 1;
 392:	11 e0       	ldi	r17, 0x01	; 1
 394:	04 c0       	rjmp	.+8      	; 0x39e <ReadSensors+0x76>
		LEDOn(3);
	}
	else
	{
		sensor3 = 0;
		LEDOff(3);
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	0e 94 c3 00 	call	0x186	; 0x186 <LEDOff>
		sensor3 = 1;
		LEDOn(3);
	}
	else
	{
		sensor3 = 0;
 39c:	10 e0       	ldi	r17, 0x00	; 0
		LEDOff(3);
	}

	left=ReadADC(SENSOR2);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
	if(left>SENSOR_THRES)// Left black line sensor
 3a4:	81 32       	cpi	r24, 0x21	; 33
 3a6:	93 40       	sbci	r25, 0x03	; 3
 3a8:	50 f0       	brcs	.+20     	; 0x3be <ReadSensors+0x96>
	{
		sensor2 = 1;
		LEDOn(2);
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LEDOn>
	{
		sensor2 = 0;
		LEDOff(2);
	}
	
	eleft=ReadADC(SENSOR1);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
	if(eleft>SENSOR_THRES)// Left black line sensor
 3b6:	81 32       	cpi	r24, 0x21	; 33
 3b8:	93 40       	sbci	r25, 0x03	; 3
 3ba:	68 f4       	brcc	.+26     	; 0x3d6 <ReadSensors+0xae>
 3bc:	9f c0       	rjmp	.+318    	; 0x4fc <__stack+0x9d>
		LEDOn(2);
	}
	else
	{
		sensor2 = 0;
		LEDOff(2);
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 c3 00 	call	0x186	; 0x186 <LEDOff>
	}
	
	eleft=ReadADC(SENSOR1);
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 4e 00 	call	0x9c	; 0x9c <ReadADC>
	if(eleft>SENSOR_THRES)// Left black line sensor
 3ca:	81 32       	cpi	r24, 0x21	; 33
 3cc:	93 40       	sbci	r25, 0x03	; 3
 3ce:	08 f4       	brcc	.+2      	; 0x3d2 <ReadSensors+0xaa>
 3d0:	8c c0       	rjmp	.+280    	; 0x4ea <__stack+0x8b>
		sensor2 = 1;
		LEDOn(2);
	}
	else
	{
		sensor2 = 0;
 3d2:	c0 e0       	ldi	r28, 0x00	; 0
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <ReadSensors+0xb0>
	}

	left=ReadADC(SENSOR2);
	if(left>SENSOR_THRES)// Left black line sensor
	{
		sensor2 = 1;
 3d6:	c1 e0       	ldi	r28, 0x01	; 1
	
	eleft=ReadADC(SENSOR1);
	if(eleft>SENSOR_THRES)// Left black line sensor
	{
		sensor1 = 1;
		LEDOn(1);
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LEDOn>
	}
	
	eleft=ReadADC(SENSOR1);
	if(eleft>SENSOR_THRES)// Left black line sensor
	{
		sensor1 = 1;
 3de:	77 24       	eor	r7, r7
 3e0:	73 94       	inc	r7
 3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <ReadSensors+0xd0>
		sensor1 = 0;
		LEDOff(1);
	}
	
	
	if(sensor1==0 && sensor2==0 && sensor3==0 && sensor4==0 && sensor5==0)
 3e4:	c1 10       	cpse	r12, r1
 3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <ReadSensors+0xcc>
 3e8:	00 23       	and	r16, r16
 3ea:	09 f4       	brne	.+2      	; 0x3ee <ReadSensors+0xc6>
 3ec:	79 c0       	rjmp	.+242    	; 0x4e0 <__stack+0x81>
		sensor2 = 1;
		LEDOn(2);
	}
	else
	{
		sensor2 = 0;
 3ee:	c0 e0       	ldi	r28, 0x00	; 0
		sensor1 = 1;
		LEDOn(1);
	}
	else
	{
		sensor1 = 0;
 3f0:	71 2c       	mov	r7, r1
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <ReadSensors+0xd0>
		sensor2 = 1;
		LEDOn(2);
	}
	else
	{
		sensor2 = 0;
 3f4:	c0 e0       	ldi	r28, 0x00	; 0
		sensor1 = 1;
		LEDOn(1);
	}
	else
	{
		sensor1 = 0;
 3f6:	71 2c       	mov	r7, r1
	{
		return 0xFF;
	}
	
	// Calculate weighted mean
	avgSensor = (float) sensor1*1 + sensor2*2 + sensor3*3 + sensor4*4 + sensor5*5 ;
 3f8:	d0 e0       	ldi	r29, 0x00	; 0
 3fa:	e1 2e       	mov	r14, r17
 3fc:	f1 2c       	mov	r15, r1
 3fe:	d1 2c       	mov	r13, r1
 400:	10 e0       	ldi	r17, 0x00	; 0
 402:	67 2d       	mov	r22, r7
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 9e 04 	call	0x93c	; 0x93c <__floatunsisf>
 40e:	4b 01       	movw	r8, r22
 410:	5c 01       	movw	r10, r24
 412:	be 01       	movw	r22, r28
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	07 2e       	mov	r0, r23
 41a:	00 0c       	add	r0, r0
 41c:	88 0b       	sbc	r24, r24
 41e:	99 0b       	sbc	r25, r25
 420:	0e 94 a0 04 	call	0x940	; 0x940 <__floatsisf>
 424:	9b 01       	movw	r18, r22
 426:	ac 01       	movw	r20, r24
 428:	c5 01       	movw	r24, r10
 42a:	b4 01       	movw	r22, r8
 42c:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 430:	4b 01       	movw	r8, r22
 432:	5c 01       	movw	r10, r24
 434:	b7 01       	movw	r22, r14
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	6e 0d       	add	r22, r14
 43c:	7f 1d       	adc	r23, r15
 43e:	07 2e       	mov	r0, r23
 440:	00 0c       	add	r0, r0
 442:	88 0b       	sbc	r24, r24
 444:	99 0b       	sbc	r25, r25
 446:	0e 94 a0 04 	call	0x940	; 0x940 <__floatsisf>
 44a:	9b 01       	movw	r18, r22
 44c:	ac 01       	movw	r20, r24
 44e:	c5 01       	movw	r24, r10
 450:	b4 01       	movw	r22, r8
 452:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 456:	4b 01       	movw	r8, r22
 458:	5c 01       	movw	r10, r24
 45a:	b6 01       	movw	r22, r12
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	66 0f       	add	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	07 2e       	mov	r0, r23
 466:	00 0c       	add	r0, r0
 468:	88 0b       	sbc	r24, r24
 46a:	99 0b       	sbc	r25, r25
 46c:	0e 94 a0 04 	call	0x940	; 0x940 <__floatsisf>
 470:	9b 01       	movw	r18, r22
 472:	ac 01       	movw	r20, r24
 474:	c5 01       	movw	r24, r10
 476:	b4 01       	movw	r22, r8
 478:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 47c:	4b 01       	movw	r8, r22
 47e:	5c 01       	movw	r10, r24
 480:	b8 01       	movw	r22, r16
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	60 0f       	add	r22, r16
 48c:	71 1f       	adc	r23, r17
 48e:	07 2e       	mov	r0, r23
 490:	00 0c       	add	r0, r0
 492:	88 0b       	sbc	r24, r24
 494:	99 0b       	sbc	r25, r25
 496:	0e 94 a0 04 	call	0x940	; 0x940 <__floatsisf>
 49a:	9b 01       	movw	r18, r22
 49c:	ac 01       	movw	r20, r24
 49e:	c5 01       	movw	r24, r10
 4a0:	b4 01       	movw	r22, r8
 4a2:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 4a6:	4b 01       	movw	r8, r22
 4a8:	5c 01       	movw	r10, r24
	avgSensor = (float) avgSensor / (sensor1 + sensor2 + sensor3 + sensor4 + sensor5);
 4aa:	c7 0d       	add	r28, r7
 4ac:	d1 1d       	adc	r29, r1
 4ae:	ce 0d       	add	r28, r14
 4b0:	df 1d       	adc	r29, r15
 4b2:	b6 01       	movw	r22, r12
 4b4:	6c 0f       	add	r22, r28
 4b6:	7d 1f       	adc	r23, r29
 4b8:	e8 01       	movw	r28, r16
 4ba:	c6 0f       	add	r28, r22
 4bc:	d7 1f       	adc	r29, r23
 4be:	be 01       	movw	r22, r28
 4c0:	dd 0f       	add	r29, r29
 4c2:	88 0b       	sbc	r24, r24
 4c4:	99 0b       	sbc	r25, r25
 4c6:	0e 94 a0 04 	call	0x940	; 0x940 <__floatsisf>
 4ca:	9b 01       	movw	r18, r22
 4cc:	ac 01       	movw	r20, r24
 4ce:	c5 01       	movw	r24, r10
 4d0:	b4 01       	movw	r22, r8
 4d2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__divsf3>

	return avgSensor;
 4d6:	56 2f       	mov	r21, r22
 4d8:	47 2f       	mov	r20, r23
 4da:	38 2f       	mov	r19, r24
 4dc:	29 2f       	mov	r18, r25
 4de:	14 c0       	rjmp	.+40     	; 0x508 <__stack+0xa9>
	}
	
	
	if(sensor1==0 && sensor2==0 && sensor3==0 && sensor4==0 && sensor5==0)
	{
		return 0xFF;
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	40 e0       	ldi	r20, 0x00	; 0
 4e4:	3f e7       	ldi	r19, 0x7F	; 127
 4e6:	23 e4       	ldi	r18, 0x43	; 67
 4e8:	0f c0       	rjmp	.+30     	; 0x508 <__stack+0xa9>
		LEDOn(1);
	}
	else
	{
		sensor1 = 0;
		LEDOff(1);
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 c3 00 	call	0x186	; 0x186 <LEDOff>
	}
	
	
	if(sensor1==0 && sensor2==0 && sensor3==0 && sensor4==0 && sensor5==0)
 4f0:	11 23       	and	r17, r17
 4f2:	09 f4       	brne	.+2      	; 0x4f6 <__stack+0x97>
 4f4:	77 cf       	rjmp	.-274    	; 0x3e4 <ReadSensors+0xbc>
		sensor2 = 1;
		LEDOn(2);
	}
	else
	{
		sensor2 = 0;
 4f6:	c0 e0       	ldi	r28, 0x00	; 0
		sensor1 = 1;
		LEDOn(1);
	}
	else
	{
		sensor1 = 0;
 4f8:	71 2c       	mov	r7, r1
 4fa:	7e cf       	rjmp	.-260    	; 0x3f8 <ReadSensors+0xd0>
		LEDOff(1);
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	0e 94 c3 00 	call	0x186	; 0x186 <LEDOff>
	}

	left=ReadADC(SENSOR2);
	if(left>SENSOR_THRES)// Left black line sensor
	{
		sensor2 = 1;
 502:	c1 e0       	ldi	r28, 0x01	; 1
		sensor1 = 1;
		LEDOn(1);
	}
	else
	{
		sensor1 = 0;
 504:	71 2c       	mov	r7, r1
 506:	78 cf       	rjmp	.-272    	; 0x3f8 <ReadSensors+0xd0>
	// Calculate weighted mean
	avgSensor = (float) sensor1*1 + sensor2*2 + sensor3*3 + sensor4*4 + sensor5*5 ;
	avgSensor = (float) avgSensor / (sensor1 + sensor2 + sensor3 + sensor4 + sensor5);

	return avgSensor;
}
 508:	65 2f       	mov	r22, r21
 50a:	74 2f       	mov	r23, r20
 50c:	83 2f       	mov	r24, r19
 50e:	92 2f       	mov	r25, r18
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	ff 90       	pop	r15
 51a:	ef 90       	pop	r14
 51c:	df 90       	pop	r13
 51e:	cf 90       	pop	r12
 520:	bf 90       	pop	r11
 522:	af 90       	pop	r10
 524:	9f 90       	pop	r9
 526:	8f 90       	pop	r8
 528:	7f 90       	pop	r7
 52a:	08 95       	ret

0000052c <main>:
	}
}
int main(void)
{
	//Initialize Motors subsystem.
	MotorInit();
 52c:	0e 94 5c 00 	call	0xb8	; 0xb8 <MotorInit>
	
	//Initialize LED subsystem
	LEDInit();
 530:	0e 94 ba 00 	call	0x174	; 0x174 <LEDInit>
	
	//Initialize Analog to Digital Converter (ADC)
	InitADC();
 534:	0e 94 49 00 	call	0x92	; 0x92 <InitADC>
			
			MotorA(MOTOR_CCW,255);
		}
		
		//Delay
		DelayMs(delay);
 538:	c0 e6       	ldi	r28, 0x60	; 96
 53a:	d0 e0       	ldi	r29, 0x00	; 0
		//Take current sensor reading
		//return value is between 0 to 5
		//When the line is towards right of center then value tends to 5
		//When the line is towards left of center then value tends to 1
		//When line is in the exact center the the valeue is 3
		s=ReadSensors();
 53c:	0e 94 94 01 	call	0x328	; 0x328 <ReadSensors>
 540:	6b 01       	movw	r12, r22
 542:	7c 01       	movw	r14, r24
		
		//If line is not found beneath any sensor, use last sensor value.
		if(s==0xFF)
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	4f e7       	ldi	r20, 0x7F	; 127
 54a:	53 e4       	ldi	r21, 0x43	; 67
 54c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__cmpsf2>
 550:	88 23       	and	r24, r24
 552:	49 f0       	breq	.+18     	; 0x566 <main+0x3a>
		//Take current sensor reading
		//return value is between 0 to 5
		//When the line is towards right of center then value tends to 5
		//When the line is towards left of center then value tends to 1
		//When line is in the exact center the the valeue is 3
		s=ReadSensors();
 554:	c0 92 7a 00 	sts	0x007A, r12	; 0x80007a <s>
 558:	d0 92 7b 00 	sts	0x007B, r13	; 0x80007b <s+0x1>
 55c:	e0 92 7c 00 	sts	0x007C, r14	; 0x80007c <s+0x2>
 560:	f0 92 7d 00 	sts	0x007D, r15	; 0x80007d <s+0x3>
 564:	08 c0       	rjmp	.+16     	; 0x576 <main+0x4a>
		
		//If line is not found beneath any sensor, use last sensor value.
		if(s==0xFF)
		{
			s=sprev;
 566:	80 92 7a 00 	sts	0x007A, r8	; 0x80007a <s>
 56a:	90 92 7b 00 	sts	0x007B, r9	; 0x80007b <s+0x1>
 56e:	a0 92 7c 00 	sts	0x007C, r10	; 0x80007c <s+0x2>
 572:	b0 92 7d 00 	sts	0x007D, r11	; 0x80007d <s+0x3>
		//beneath the center sensor so the required value is 3 (second parameter)
		//The first argument is the current sensor reading.
		//The more the difference between the two greater is the control variable.
		//This control variable is used to produce turning in the robot.
		//When current value is close to required value is close to 0.
		control = PID(s,3.0);
 576:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <s>
 57a:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <s+0x1>
 57e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <s+0x2>
 582:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <s+0x3>
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	40 e4       	ldi	r20, 0x40	; 64
 58c:	50 e4       	ldi	r21, 0x40	; 64
 58e:	0e 94 03 01 	call	0x206	; 0x206 <PID>
 592:	6b 01       	movw	r12, r22
 594:	7c 01       	movw	r14, r24
 596:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <control>
 59a:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <control+0x1>
 59e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <control+0x2>
 5a2:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <control+0x3>
		
		//Limit the control
		if(control > 510)
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	4f ef       	ldi	r20, 0xFF	; 255
 5ac:	53 e4       	ldi	r21, 0x43	; 67
 5ae:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 5b2:	18 16       	cp	r1, r24
 5b4:	7c f4       	brge	.+30     	; 0x5d4 <main+0xa8>
		control = 510;
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	af ef       	ldi	r26, 0xFF	; 255
 5bc:	b3 e4       	ldi	r27, 0x43	; 67
 5be:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <control>
 5c2:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <control+0x1>
 5c6:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <control+0x2>
 5ca:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <control+0x3>
		if(control < -510)
		control = -510;

		if(control > 0.0)//the left sensor sees the line so we must turn right
 5ce:	6c 01       	movw	r12, r24
 5d0:	7d 01       	movw	r14, r26
 5d2:	34 c0       	rjmp	.+104    	; 0x63c <main+0x110>
		control = PID(s,3.0);
		
		//Limit the control
		if(control > 510)
		control = 510;
		if(control < -510)
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	4f ef       	ldi	r20, 0xFF	; 255
 5da:	53 ec       	ldi	r21, 0xC3	; 195
 5dc:	c7 01       	movw	r24, r14
 5de:	b6 01       	movw	r22, r12
 5e0:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__cmpsf2>
 5e4:	88 23       	and	r24, r24
 5e6:	7c f4       	brge	.+30     	; 0x606 <main+0xda>
		control = -510;
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	af ef       	ldi	r26, 0xFF	; 255
 5ee:	b3 ec       	ldi	r27, 0xC3	; 195
 5f0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <control>
 5f4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <control+0x1>
 5f8:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <control+0x2>
 5fc:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <control+0x3>
			else
			MotorA(MOTOR_CCW,255-control);
			
			MotorB(MOTOR_CW,255);
		}
		if(control <= 0.0)//the right sensor sees the line so we must turn left
 600:	6c 01       	movw	r12, r24
 602:	7d 01       	movw	r14, r26
 604:	55 c0       	rjmp	.+170    	; 0x6b0 <main+0x184>
		if(control > 510)
		control = 510;
		if(control < -510)
		control = -510;

		if(control > 0.0)//the left sensor sees the line so we must turn right
 606:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <control>
 60a:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <control+0x1>
 60e:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <control+0x2>
 612:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <control+0x3>
 616:	20 e0       	ldi	r18, 0x00	; 0
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	a9 01       	movw	r20, r18
 61c:	c7 01       	movw	r24, r14
 61e:	b6 01       	movw	r22, r12
 620:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 624:	18 16       	cp	r1, r24
 626:	4c f5       	brge	.+82     	; 0x67a <main+0x14e>
		{
			if(control>255)
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	4f e7       	ldi	r20, 0x7F	; 127
 62e:	53 e4       	ldi	r21, 0x43	; 67
 630:	c7 01       	movw	r24, r14
 632:	b6 01       	movw	r22, r12
 634:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 638:	18 16       	cp	r1, r24
 63a:	74 f4       	brge	.+28     	; 0x658 <main+0x12c>
			MotorA(MOTOR_CW,control-255);
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	4f e7       	ldi	r20, 0x7F	; 127
 642:	53 e4       	ldi	r21, 0x43	; 67
 644:	c7 01       	movw	r24, r14
 646:	b6 01       	movw	r22, r12
 648:	0e 94 84 03 	call	0x708	; 0x708 <__subsf3>
 64c:	0e 94 6f 04 	call	0x8de	; 0x8de <__fixunssfsi>
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	0e 94 66 00 	call	0xcc	; 0xcc <MotorA>
 656:	0d c0       	rjmp	.+26     	; 0x672 <main+0x146>
			else
			MotorA(MOTOR_CCW,255-control);
 658:	a7 01       	movw	r20, r14
 65a:	96 01       	movw	r18, r12
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	8f e7       	ldi	r24, 0x7F	; 127
 662:	93 e4       	ldi	r25, 0x43	; 67
 664:	0e 94 84 03 	call	0x708	; 0x708 <__subsf3>
 668:	0e 94 6f 04 	call	0x8de	; 0x8de <__fixunssfsi>
 66c:	82 e0       	ldi	r24, 0x02	; 2
 66e:	0e 94 66 00 	call	0xcc	; 0xcc <MotorA>
			
			MotorB(MOTOR_CW,255);
 672:	6f ef       	ldi	r22, 0xFF	; 255
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	0e 94 90 00 	call	0x120	; 0x120 <MotorB>
		}
		if(control <= 0.0)//the right sensor sees the line so we must turn left
 67a:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <control>
 67e:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <control+0x1>
 682:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <control+0x2>
 686:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <control+0x3>
 68a:	20 e0       	ldi	r18, 0x00	; 0
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	a9 01       	movw	r20, r18
 690:	c7 01       	movw	r24, r14
 692:	b6 01       	movw	r22, r12
 694:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__cmpsf2>
 698:	18 16       	cp	r1, r24
 69a:	54 f1       	brlt	.+84     	; 0x6f0 <main+0x1c4>
		{
			if(control<-255)
 69c:	20 e0       	ldi	r18, 0x00	; 0
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	4f e7       	ldi	r20, 0x7F	; 127
 6a2:	53 ec       	ldi	r21, 0xC3	; 195
 6a4:	c7 01       	movw	r24, r14
 6a6:	b6 01       	movw	r22, r12
 6a8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__cmpsf2>
 6ac:	88 23       	and	r24, r24
 6ae:	7c f4       	brge	.+30     	; 0x6ce <main+0x1a2>
			MotorB(MOTOR_CCW,-(control+255));
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	4f e7       	ldi	r20, 0x7F	; 127
 6b6:	53 e4       	ldi	r21, 0x43	; 67
 6b8:	c7 01       	movw	r24, r14
 6ba:	b6 01       	movw	r22, r12
 6bc:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 6c0:	90 58       	subi	r25, 0x80	; 128
 6c2:	0e 94 6f 04 	call	0x8de	; 0x8de <__fixunssfsi>
 6c6:	82 e0       	ldi	r24, 0x02	; 2
 6c8:	0e 94 90 00 	call	0x120	; 0x120 <MotorB>
 6cc:	0d c0       	rjmp	.+26     	; 0x6e8 <main+0x1bc>
			else
			MotorB(MOTOR_CW,255+control);
 6ce:	20 e0       	ldi	r18, 0x00	; 0
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	4f e7       	ldi	r20, 0x7F	; 127
 6d4:	53 e4       	ldi	r21, 0x43	; 67
 6d6:	c7 01       	movw	r24, r14
 6d8:	b6 01       	movw	r22, r12
 6da:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 6de:	0e 94 6f 04 	call	0x8de	; 0x8de <__fixunssfsi>
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	0e 94 90 00 	call	0x120	; 0x120 <MotorB>
			
			MotorA(MOTOR_CCW,255);
 6e8:	6f ef       	ldi	r22, 0xFF	; 255
 6ea:	82 e0       	ldi	r24, 0x02	; 2
 6ec:	0e 94 66 00 	call	0xcc	; 0xcc <MotorA>
		}
		
		//Delay
		DelayMs(delay);
 6f0:	88 81       	ld	r24, Y
 6f2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DelayMs>
		
		sprev=s;
 6f6:	80 90 7a 00 	lds	r8, 0x007A	; 0x80007a <s>
 6fa:	90 90 7b 00 	lds	r9, 0x007B	; 0x80007b <s+0x1>
 6fe:	a0 90 7c 00 	lds	r10, 0x007C	; 0x80007c <s+0x2>
 702:	b0 90 7d 00 	lds	r11, 0x007D	; 0x80007d <s+0x3>
	}
 706:	1a cf       	rjmp	.-460    	; 0x53c <main+0x10>

00000708 <__subsf3>:
 708:	50 58       	subi	r21, 0x80	; 128

0000070a <__addsf3>:
 70a:	bb 27       	eor	r27, r27
 70c:	aa 27       	eor	r26, r26
 70e:	0e 94 9c 03 	call	0x738	; 0x738 <__addsf3x>
 712:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_round>
 716:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_pscA>
 71a:	38 f0       	brcs	.+14     	; 0x72a <__addsf3+0x20>
 71c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_pscB>
 720:	20 f0       	brcs	.+8      	; 0x72a <__addsf3+0x20>
 722:	39 f4       	brne	.+14     	; 0x732 <__addsf3+0x28>
 724:	9f 3f       	cpi	r25, 0xFF	; 255
 726:	19 f4       	brne	.+6      	; 0x72e <__addsf3+0x24>
 728:	26 f4       	brtc	.+8      	; 0x732 <__addsf3+0x28>
 72a:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>
 72e:	0e f4       	brtc	.+2      	; 0x732 <__addsf3+0x28>
 730:	e0 95       	com	r30
 732:	e7 fb       	bst	r30, 7
 734:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>

00000738 <__addsf3x>:
 738:	e9 2f       	mov	r30, r25
 73a:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_split3>
 73e:	58 f3       	brcs	.-42     	; 0x716 <__addsf3+0xc>
 740:	ba 17       	cp	r27, r26
 742:	62 07       	cpc	r22, r18
 744:	73 07       	cpc	r23, r19
 746:	84 07       	cpc	r24, r20
 748:	95 07       	cpc	r25, r21
 74a:	20 f0       	brcs	.+8      	; 0x754 <__addsf3x+0x1c>
 74c:	79 f4       	brne	.+30     	; 0x76c <__addsf3x+0x34>
 74e:	a6 f5       	brtc	.+104    	; 0x7b8 <__addsf3x+0x80>
 750:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_zero>
 754:	0e f4       	brtc	.+2      	; 0x758 <__addsf3x+0x20>
 756:	e0 95       	com	r30
 758:	0b 2e       	mov	r0, r27
 75a:	ba 2f       	mov	r27, r26
 75c:	a0 2d       	mov	r26, r0
 75e:	0b 01       	movw	r0, r22
 760:	b9 01       	movw	r22, r18
 762:	90 01       	movw	r18, r0
 764:	0c 01       	movw	r0, r24
 766:	ca 01       	movw	r24, r20
 768:	a0 01       	movw	r20, r0
 76a:	11 24       	eor	r1, r1
 76c:	ff 27       	eor	r31, r31
 76e:	59 1b       	sub	r21, r25
 770:	99 f0       	breq	.+38     	; 0x798 <__addsf3x+0x60>
 772:	59 3f       	cpi	r21, 0xF9	; 249
 774:	50 f4       	brcc	.+20     	; 0x78a <__addsf3x+0x52>
 776:	50 3e       	cpi	r21, 0xE0	; 224
 778:	68 f1       	brcs	.+90     	; 0x7d4 <__addsf3x+0x9c>
 77a:	1a 16       	cp	r1, r26
 77c:	f0 40       	sbci	r31, 0x00	; 0
 77e:	a2 2f       	mov	r26, r18
 780:	23 2f       	mov	r18, r19
 782:	34 2f       	mov	r19, r20
 784:	44 27       	eor	r20, r20
 786:	58 5f       	subi	r21, 0xF8	; 248
 788:	f3 cf       	rjmp	.-26     	; 0x770 <__addsf3x+0x38>
 78a:	46 95       	lsr	r20
 78c:	37 95       	ror	r19
 78e:	27 95       	ror	r18
 790:	a7 95       	ror	r26
 792:	f0 40       	sbci	r31, 0x00	; 0
 794:	53 95       	inc	r21
 796:	c9 f7       	brne	.-14     	; 0x78a <__addsf3x+0x52>
 798:	7e f4       	brtc	.+30     	; 0x7b8 <__addsf3x+0x80>
 79a:	1f 16       	cp	r1, r31
 79c:	ba 0b       	sbc	r27, r26
 79e:	62 0b       	sbc	r22, r18
 7a0:	73 0b       	sbc	r23, r19
 7a2:	84 0b       	sbc	r24, r20
 7a4:	ba f0       	brmi	.+46     	; 0x7d4 <__addsf3x+0x9c>
 7a6:	91 50       	subi	r25, 0x01	; 1
 7a8:	a1 f0       	breq	.+40     	; 0x7d2 <__addsf3x+0x9a>
 7aa:	ff 0f       	add	r31, r31
 7ac:	bb 1f       	adc	r27, r27
 7ae:	66 1f       	adc	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	88 1f       	adc	r24, r24
 7b4:	c2 f7       	brpl	.-16     	; 0x7a6 <__addsf3x+0x6e>
 7b6:	0e c0       	rjmp	.+28     	; 0x7d4 <__addsf3x+0x9c>
 7b8:	ba 0f       	add	r27, r26
 7ba:	62 1f       	adc	r22, r18
 7bc:	73 1f       	adc	r23, r19
 7be:	84 1f       	adc	r24, r20
 7c0:	48 f4       	brcc	.+18     	; 0x7d4 <__addsf3x+0x9c>
 7c2:	87 95       	ror	r24
 7c4:	77 95       	ror	r23
 7c6:	67 95       	ror	r22
 7c8:	b7 95       	ror	r27
 7ca:	f7 95       	ror	r31
 7cc:	9e 3f       	cpi	r25, 0xFE	; 254
 7ce:	08 f0       	brcs	.+2      	; 0x7d2 <__addsf3x+0x9a>
 7d0:	b0 cf       	rjmp	.-160    	; 0x732 <__addsf3+0x28>
 7d2:	93 95       	inc	r25
 7d4:	88 0f       	add	r24, r24
 7d6:	08 f0       	brcs	.+2      	; 0x7da <__addsf3x+0xa2>
 7d8:	99 27       	eor	r25, r25
 7da:	ee 0f       	add	r30, r30
 7dc:	97 95       	ror	r25
 7de:	87 95       	ror	r24
 7e0:	08 95       	ret

000007e2 <__cmpsf2>:
 7e2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fp_cmp>
 7e6:	08 f4       	brcc	.+2      	; 0x7ea <__cmpsf2+0x8>
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	08 95       	ret

000007ec <__divsf3>:
 7ec:	0e 94 0a 04 	call	0x814	; 0x814 <__divsf3x>
 7f0:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_round>
 7f4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_pscB>
 7f8:	58 f0       	brcs	.+22     	; 0x810 <__divsf3+0x24>
 7fa:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_pscA>
 7fe:	40 f0       	brcs	.+16     	; 0x810 <__divsf3+0x24>
 800:	29 f4       	brne	.+10     	; 0x80c <__divsf3+0x20>
 802:	5f 3f       	cpi	r21, 0xFF	; 255
 804:	29 f0       	breq	.+10     	; 0x810 <__divsf3+0x24>
 806:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 80a:	51 11       	cpse	r21, r1
 80c:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>
 810:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>

00000814 <__divsf3x>:
 814:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_split3>
 818:	68 f3       	brcs	.-38     	; 0x7f4 <__divsf3+0x8>

0000081a <__divsf3_pse>:
 81a:	99 23       	and	r25, r25
 81c:	b1 f3       	breq	.-20     	; 0x80a <__divsf3+0x1e>
 81e:	55 23       	and	r21, r21
 820:	91 f3       	breq	.-28     	; 0x806 <__divsf3+0x1a>
 822:	95 1b       	sub	r25, r21
 824:	55 0b       	sbc	r21, r21
 826:	bb 27       	eor	r27, r27
 828:	aa 27       	eor	r26, r26
 82a:	62 17       	cp	r22, r18
 82c:	73 07       	cpc	r23, r19
 82e:	84 07       	cpc	r24, r20
 830:	38 f0       	brcs	.+14     	; 0x840 <__divsf3_pse+0x26>
 832:	9f 5f       	subi	r25, 0xFF	; 255
 834:	5f 4f       	sbci	r21, 0xFF	; 255
 836:	22 0f       	add	r18, r18
 838:	33 1f       	adc	r19, r19
 83a:	44 1f       	adc	r20, r20
 83c:	aa 1f       	adc	r26, r26
 83e:	a9 f3       	breq	.-22     	; 0x82a <__divsf3_pse+0x10>
 840:	35 d0       	rcall	.+106    	; 0x8ac <__divsf3_pse+0x92>
 842:	0e 2e       	mov	r0, r30
 844:	3a f0       	brmi	.+14     	; 0x854 <__divsf3_pse+0x3a>
 846:	e0 e8       	ldi	r30, 0x80	; 128
 848:	32 d0       	rcall	.+100    	; 0x8ae <__divsf3_pse+0x94>
 84a:	91 50       	subi	r25, 0x01	; 1
 84c:	50 40       	sbci	r21, 0x00	; 0
 84e:	e6 95       	lsr	r30
 850:	00 1c       	adc	r0, r0
 852:	ca f7       	brpl	.-14     	; 0x846 <__divsf3_pse+0x2c>
 854:	2b d0       	rcall	.+86     	; 0x8ac <__divsf3_pse+0x92>
 856:	fe 2f       	mov	r31, r30
 858:	29 d0       	rcall	.+82     	; 0x8ac <__divsf3_pse+0x92>
 85a:	66 0f       	add	r22, r22
 85c:	77 1f       	adc	r23, r23
 85e:	88 1f       	adc	r24, r24
 860:	bb 1f       	adc	r27, r27
 862:	26 17       	cp	r18, r22
 864:	37 07       	cpc	r19, r23
 866:	48 07       	cpc	r20, r24
 868:	ab 07       	cpc	r26, r27
 86a:	b0 e8       	ldi	r27, 0x80	; 128
 86c:	09 f0       	breq	.+2      	; 0x870 <__divsf3_pse+0x56>
 86e:	bb 0b       	sbc	r27, r27
 870:	80 2d       	mov	r24, r0
 872:	bf 01       	movw	r22, r30
 874:	ff 27       	eor	r31, r31
 876:	93 58       	subi	r25, 0x83	; 131
 878:	5f 4f       	sbci	r21, 0xFF	; 255
 87a:	3a f0       	brmi	.+14     	; 0x88a <__divsf3_pse+0x70>
 87c:	9e 3f       	cpi	r25, 0xFE	; 254
 87e:	51 05       	cpc	r21, r1
 880:	78 f0       	brcs	.+30     	; 0x8a0 <__divsf3_pse+0x86>
 882:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 886:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>
 88a:	5f 3f       	cpi	r21, 0xFF	; 255
 88c:	e4 f3       	brlt	.-8      	; 0x886 <__divsf3_pse+0x6c>
 88e:	98 3e       	cpi	r25, 0xE8	; 232
 890:	d4 f3       	brlt	.-12     	; 0x886 <__divsf3_pse+0x6c>
 892:	86 95       	lsr	r24
 894:	77 95       	ror	r23
 896:	67 95       	ror	r22
 898:	b7 95       	ror	r27
 89a:	f7 95       	ror	r31
 89c:	9f 5f       	subi	r25, 0xFF	; 255
 89e:	c9 f7       	brne	.-14     	; 0x892 <__divsf3_pse+0x78>
 8a0:	88 0f       	add	r24, r24
 8a2:	91 1d       	adc	r25, r1
 8a4:	96 95       	lsr	r25
 8a6:	87 95       	ror	r24
 8a8:	97 f9       	bld	r25, 7
 8aa:	08 95       	ret
 8ac:	e1 e0       	ldi	r30, 0x01	; 1
 8ae:	66 0f       	add	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	88 1f       	adc	r24, r24
 8b4:	bb 1f       	adc	r27, r27
 8b6:	62 17       	cp	r22, r18
 8b8:	73 07       	cpc	r23, r19
 8ba:	84 07       	cpc	r24, r20
 8bc:	ba 07       	cpc	r27, r26
 8be:	20 f0       	brcs	.+8      	; 0x8c8 <__divsf3_pse+0xae>
 8c0:	62 1b       	sub	r22, r18
 8c2:	73 0b       	sbc	r23, r19
 8c4:	84 0b       	sbc	r24, r20
 8c6:	ba 0b       	sbc	r27, r26
 8c8:	ee 1f       	adc	r30, r30
 8ca:	88 f7       	brcc	.-30     	; 0x8ae <__divsf3_pse+0x94>
 8cc:	e0 95       	com	r30
 8ce:	08 95       	ret

000008d0 <__fixsfsi>:
 8d0:	0e 94 6f 04 	call	0x8de	; 0x8de <__fixunssfsi>
 8d4:	68 94       	set
 8d6:	b1 11       	cpse	r27, r1
 8d8:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>
 8dc:	08 95       	ret

000008de <__fixunssfsi>:
 8de:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_splitA>
 8e2:	88 f0       	brcs	.+34     	; 0x906 <__fixunssfsi+0x28>
 8e4:	9f 57       	subi	r25, 0x7F	; 127
 8e6:	98 f0       	brcs	.+38     	; 0x90e <__fixunssfsi+0x30>
 8e8:	b9 2f       	mov	r27, r25
 8ea:	99 27       	eor	r25, r25
 8ec:	b7 51       	subi	r27, 0x17	; 23
 8ee:	b0 f0       	brcs	.+44     	; 0x91c <__fixunssfsi+0x3e>
 8f0:	e1 f0       	breq	.+56     	; 0x92a <__fixunssfsi+0x4c>
 8f2:	66 0f       	add	r22, r22
 8f4:	77 1f       	adc	r23, r23
 8f6:	88 1f       	adc	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	1a f0       	brmi	.+6      	; 0x902 <__fixunssfsi+0x24>
 8fc:	ba 95       	dec	r27
 8fe:	c9 f7       	brne	.-14     	; 0x8f2 <__fixunssfsi+0x14>
 900:	14 c0       	rjmp	.+40     	; 0x92a <__fixunssfsi+0x4c>
 902:	b1 30       	cpi	r27, 0x01	; 1
 904:	91 f0       	breq	.+36     	; 0x92a <__fixunssfsi+0x4c>
 906:	0e 94 49 05 	call	0xa92	; 0xa92 <__fp_zero>
 90a:	b1 e0       	ldi	r27, 0x01	; 1
 90c:	08 95       	ret
 90e:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_zero>
 912:	67 2f       	mov	r22, r23
 914:	78 2f       	mov	r23, r24
 916:	88 27       	eor	r24, r24
 918:	b8 5f       	subi	r27, 0xF8	; 248
 91a:	39 f0       	breq	.+14     	; 0x92a <__fixunssfsi+0x4c>
 91c:	b9 3f       	cpi	r27, 0xF9	; 249
 91e:	cc f3       	brlt	.-14     	; 0x912 <__fixunssfsi+0x34>
 920:	86 95       	lsr	r24
 922:	77 95       	ror	r23
 924:	67 95       	ror	r22
 926:	b3 95       	inc	r27
 928:	d9 f7       	brne	.-10     	; 0x920 <__fixunssfsi+0x42>
 92a:	3e f4       	brtc	.+14     	; 0x93a <__fixunssfsi+0x5c>
 92c:	90 95       	com	r25
 92e:	80 95       	com	r24
 930:	70 95       	com	r23
 932:	61 95       	neg	r22
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	8f 4f       	sbci	r24, 0xFF	; 255
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	08 95       	ret

0000093c <__floatunsisf>:
 93c:	e8 94       	clt
 93e:	09 c0       	rjmp	.+18     	; 0x952 <__floatsisf+0x12>

00000940 <__floatsisf>:
 940:	97 fb       	bst	r25, 7
 942:	3e f4       	brtc	.+14     	; 0x952 <__floatsisf+0x12>
 944:	90 95       	com	r25
 946:	80 95       	com	r24
 948:	70 95       	com	r23
 94a:	61 95       	neg	r22
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	8f 4f       	sbci	r24, 0xFF	; 255
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	99 23       	and	r25, r25
 954:	a9 f0       	breq	.+42     	; 0x980 <__floatsisf+0x40>
 956:	f9 2f       	mov	r31, r25
 958:	96 e9       	ldi	r25, 0x96	; 150
 95a:	bb 27       	eor	r27, r27
 95c:	93 95       	inc	r25
 95e:	f6 95       	lsr	r31
 960:	87 95       	ror	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	b7 95       	ror	r27
 968:	f1 11       	cpse	r31, r1
 96a:	f8 cf       	rjmp	.-16     	; 0x95c <__floatsisf+0x1c>
 96c:	fa f4       	brpl	.+62     	; 0x9ac <__floatsisf+0x6c>
 96e:	bb 0f       	add	r27, r27
 970:	11 f4       	brne	.+4      	; 0x976 <__floatsisf+0x36>
 972:	60 ff       	sbrs	r22, 0
 974:	1b c0       	rjmp	.+54     	; 0x9ac <__floatsisf+0x6c>
 976:	6f 5f       	subi	r22, 0xFF	; 255
 978:	7f 4f       	sbci	r23, 0xFF	; 255
 97a:	8f 4f       	sbci	r24, 0xFF	; 255
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	16 c0       	rjmp	.+44     	; 0x9ac <__floatsisf+0x6c>
 980:	88 23       	and	r24, r24
 982:	11 f0       	breq	.+4      	; 0x988 <__floatsisf+0x48>
 984:	96 e9       	ldi	r25, 0x96	; 150
 986:	11 c0       	rjmp	.+34     	; 0x9aa <__floatsisf+0x6a>
 988:	77 23       	and	r23, r23
 98a:	21 f0       	breq	.+8      	; 0x994 <__floatsisf+0x54>
 98c:	9e e8       	ldi	r25, 0x8E	; 142
 98e:	87 2f       	mov	r24, r23
 990:	76 2f       	mov	r23, r22
 992:	05 c0       	rjmp	.+10     	; 0x99e <__floatsisf+0x5e>
 994:	66 23       	and	r22, r22
 996:	71 f0       	breq	.+28     	; 0x9b4 <__floatsisf+0x74>
 998:	96 e8       	ldi	r25, 0x86	; 134
 99a:	86 2f       	mov	r24, r22
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	60 e0       	ldi	r22, 0x00	; 0
 9a0:	2a f0       	brmi	.+10     	; 0x9ac <__floatsisf+0x6c>
 9a2:	9a 95       	dec	r25
 9a4:	66 0f       	add	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	da f7       	brpl	.-10     	; 0x9a2 <__floatsisf+0x62>
 9ac:	88 0f       	add	r24, r24
 9ae:	96 95       	lsr	r25
 9b0:	87 95       	ror	r24
 9b2:	97 f9       	bld	r25, 7
 9b4:	08 95       	ret

000009b6 <__fp_cmp>:
 9b6:	99 0f       	add	r25, r25
 9b8:	00 08       	sbc	r0, r0
 9ba:	55 0f       	add	r21, r21
 9bc:	aa 0b       	sbc	r26, r26
 9be:	e0 e8       	ldi	r30, 0x80	; 128
 9c0:	fe ef       	ldi	r31, 0xFE	; 254
 9c2:	16 16       	cp	r1, r22
 9c4:	17 06       	cpc	r1, r23
 9c6:	e8 07       	cpc	r30, r24
 9c8:	f9 07       	cpc	r31, r25
 9ca:	c0 f0       	brcs	.+48     	; 0x9fc <__fp_cmp+0x46>
 9cc:	12 16       	cp	r1, r18
 9ce:	13 06       	cpc	r1, r19
 9d0:	e4 07       	cpc	r30, r20
 9d2:	f5 07       	cpc	r31, r21
 9d4:	98 f0       	brcs	.+38     	; 0x9fc <__fp_cmp+0x46>
 9d6:	62 1b       	sub	r22, r18
 9d8:	73 0b       	sbc	r23, r19
 9da:	84 0b       	sbc	r24, r20
 9dc:	95 0b       	sbc	r25, r21
 9de:	39 f4       	brne	.+14     	; 0x9ee <__fp_cmp+0x38>
 9e0:	0a 26       	eor	r0, r26
 9e2:	61 f0       	breq	.+24     	; 0x9fc <__fp_cmp+0x46>
 9e4:	23 2b       	or	r18, r19
 9e6:	24 2b       	or	r18, r20
 9e8:	25 2b       	or	r18, r21
 9ea:	21 f4       	brne	.+8      	; 0x9f4 <__fp_cmp+0x3e>
 9ec:	08 95       	ret
 9ee:	0a 26       	eor	r0, r26
 9f0:	09 f4       	brne	.+2      	; 0x9f4 <__fp_cmp+0x3e>
 9f2:	a1 40       	sbci	r26, 0x01	; 1
 9f4:	a6 95       	lsr	r26
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	81 1d       	adc	r24, r1
 9fa:	81 1d       	adc	r24, r1
 9fc:	08 95       	ret

000009fe <__fp_inf>:
 9fe:	97 f9       	bld	r25, 7
 a00:	9f 67       	ori	r25, 0x7F	; 127
 a02:	80 e8       	ldi	r24, 0x80	; 128
 a04:	70 e0       	ldi	r23, 0x00	; 0
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	08 95       	ret

00000a0a <__fp_nan>:
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	80 ec       	ldi	r24, 0xC0	; 192
 a0e:	08 95       	ret

00000a10 <__fp_pscA>:
 a10:	00 24       	eor	r0, r0
 a12:	0a 94       	dec	r0
 a14:	16 16       	cp	r1, r22
 a16:	17 06       	cpc	r1, r23
 a18:	18 06       	cpc	r1, r24
 a1a:	09 06       	cpc	r0, r25
 a1c:	08 95       	ret

00000a1e <__fp_pscB>:
 a1e:	00 24       	eor	r0, r0
 a20:	0a 94       	dec	r0
 a22:	12 16       	cp	r1, r18
 a24:	13 06       	cpc	r1, r19
 a26:	14 06       	cpc	r1, r20
 a28:	05 06       	cpc	r0, r21
 a2a:	08 95       	ret

00000a2c <__fp_round>:
 a2c:	09 2e       	mov	r0, r25
 a2e:	03 94       	inc	r0
 a30:	00 0c       	add	r0, r0
 a32:	11 f4       	brne	.+4      	; 0xa38 <__fp_round+0xc>
 a34:	88 23       	and	r24, r24
 a36:	52 f0       	brmi	.+20     	; 0xa4c <__fp_round+0x20>
 a38:	bb 0f       	add	r27, r27
 a3a:	40 f4       	brcc	.+16     	; 0xa4c <__fp_round+0x20>
 a3c:	bf 2b       	or	r27, r31
 a3e:	11 f4       	brne	.+4      	; 0xa44 <__fp_round+0x18>
 a40:	60 ff       	sbrs	r22, 0
 a42:	04 c0       	rjmp	.+8      	; 0xa4c <__fp_round+0x20>
 a44:	6f 5f       	subi	r22, 0xFF	; 255
 a46:	7f 4f       	sbci	r23, 0xFF	; 255
 a48:	8f 4f       	sbci	r24, 0xFF	; 255
 a4a:	9f 4f       	sbci	r25, 0xFF	; 255
 a4c:	08 95       	ret

00000a4e <__fp_split3>:
 a4e:	57 fd       	sbrc	r21, 7
 a50:	90 58       	subi	r25, 0x80	; 128
 a52:	44 0f       	add	r20, r20
 a54:	55 1f       	adc	r21, r21
 a56:	59 f0       	breq	.+22     	; 0xa6e <__fp_splitA+0x10>
 a58:	5f 3f       	cpi	r21, 0xFF	; 255
 a5a:	71 f0       	breq	.+28     	; 0xa78 <__fp_splitA+0x1a>
 a5c:	47 95       	ror	r20

00000a5e <__fp_splitA>:
 a5e:	88 0f       	add	r24, r24
 a60:	97 fb       	bst	r25, 7
 a62:	99 1f       	adc	r25, r25
 a64:	61 f0       	breq	.+24     	; 0xa7e <__fp_splitA+0x20>
 a66:	9f 3f       	cpi	r25, 0xFF	; 255
 a68:	79 f0       	breq	.+30     	; 0xa88 <__fp_splitA+0x2a>
 a6a:	87 95       	ror	r24
 a6c:	08 95       	ret
 a6e:	12 16       	cp	r1, r18
 a70:	13 06       	cpc	r1, r19
 a72:	14 06       	cpc	r1, r20
 a74:	55 1f       	adc	r21, r21
 a76:	f2 cf       	rjmp	.-28     	; 0xa5c <__fp_split3+0xe>
 a78:	46 95       	lsr	r20
 a7a:	f1 df       	rcall	.-30     	; 0xa5e <__fp_splitA>
 a7c:	08 c0       	rjmp	.+16     	; 0xa8e <__fp_splitA+0x30>
 a7e:	16 16       	cp	r1, r22
 a80:	17 06       	cpc	r1, r23
 a82:	18 06       	cpc	r1, r24
 a84:	99 1f       	adc	r25, r25
 a86:	f1 cf       	rjmp	.-30     	; 0xa6a <__fp_splitA+0xc>
 a88:	86 95       	lsr	r24
 a8a:	71 05       	cpc	r23, r1
 a8c:	61 05       	cpc	r22, r1
 a8e:	08 94       	sec
 a90:	08 95       	ret

00000a92 <__fp_zero>:
 a92:	e8 94       	clt

00000a94 <__fp_szero>:
 a94:	bb 27       	eor	r27, r27
 a96:	66 27       	eor	r22, r22
 a98:	77 27       	eor	r23, r23
 a9a:	cb 01       	movw	r24, r22
 a9c:	97 f9       	bld	r25, 7
 a9e:	08 95       	ret

00000aa0 <__gesf2>:
 aa0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fp_cmp>
 aa4:	08 f4       	brcc	.+2      	; 0xaa8 <__gesf2+0x8>
 aa6:	8f ef       	ldi	r24, 0xFF	; 255
 aa8:	08 95       	ret

00000aaa <__mulsf3>:
 aaa:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3x>
 aae:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_round>
 ab2:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_pscA>
 ab6:	38 f0       	brcs	.+14     	; 0xac6 <__mulsf3+0x1c>
 ab8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_pscB>
 abc:	20 f0       	brcs	.+8      	; 0xac6 <__mulsf3+0x1c>
 abe:	95 23       	and	r25, r21
 ac0:	11 f0       	breq	.+4      	; 0xac6 <__mulsf3+0x1c>
 ac2:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 ac6:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>
 aca:	11 24       	eor	r1, r1
 acc:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>

00000ad0 <__mulsf3x>:
 ad0:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_split3>
 ad4:	70 f3       	brcs	.-36     	; 0xab2 <__mulsf3+0x8>

00000ad6 <__mulsf3_pse>:
 ad6:	95 9f       	mul	r25, r21
 ad8:	c1 f3       	breq	.-16     	; 0xaca <__mulsf3+0x20>
 ada:	95 0f       	add	r25, r21
 adc:	50 e0       	ldi	r21, 0x00	; 0
 ade:	55 1f       	adc	r21, r21
 ae0:	62 9f       	mul	r22, r18
 ae2:	f0 01       	movw	r30, r0
 ae4:	72 9f       	mul	r23, r18
 ae6:	bb 27       	eor	r27, r27
 ae8:	f0 0d       	add	r31, r0
 aea:	b1 1d       	adc	r27, r1
 aec:	63 9f       	mul	r22, r19
 aee:	aa 27       	eor	r26, r26
 af0:	f0 0d       	add	r31, r0
 af2:	b1 1d       	adc	r27, r1
 af4:	aa 1f       	adc	r26, r26
 af6:	64 9f       	mul	r22, r20
 af8:	66 27       	eor	r22, r22
 afa:	b0 0d       	add	r27, r0
 afc:	a1 1d       	adc	r26, r1
 afe:	66 1f       	adc	r22, r22
 b00:	82 9f       	mul	r24, r18
 b02:	22 27       	eor	r18, r18
 b04:	b0 0d       	add	r27, r0
 b06:	a1 1d       	adc	r26, r1
 b08:	62 1f       	adc	r22, r18
 b0a:	73 9f       	mul	r23, r19
 b0c:	b0 0d       	add	r27, r0
 b0e:	a1 1d       	adc	r26, r1
 b10:	62 1f       	adc	r22, r18
 b12:	83 9f       	mul	r24, r19
 b14:	a0 0d       	add	r26, r0
 b16:	61 1d       	adc	r22, r1
 b18:	22 1f       	adc	r18, r18
 b1a:	74 9f       	mul	r23, r20
 b1c:	33 27       	eor	r19, r19
 b1e:	a0 0d       	add	r26, r0
 b20:	61 1d       	adc	r22, r1
 b22:	23 1f       	adc	r18, r19
 b24:	84 9f       	mul	r24, r20
 b26:	60 0d       	add	r22, r0
 b28:	21 1d       	adc	r18, r1
 b2a:	82 2f       	mov	r24, r18
 b2c:	76 2f       	mov	r23, r22
 b2e:	6a 2f       	mov	r22, r26
 b30:	11 24       	eor	r1, r1
 b32:	9f 57       	subi	r25, 0x7F	; 127
 b34:	50 40       	sbci	r21, 0x00	; 0
 b36:	9a f0       	brmi	.+38     	; 0xb5e <__mulsf3_pse+0x88>
 b38:	f1 f0       	breq	.+60     	; 0xb76 <__mulsf3_pse+0xa0>
 b3a:	88 23       	and	r24, r24
 b3c:	4a f0       	brmi	.+18     	; 0xb50 <__mulsf3_pse+0x7a>
 b3e:	ee 0f       	add	r30, r30
 b40:	ff 1f       	adc	r31, r31
 b42:	bb 1f       	adc	r27, r27
 b44:	66 1f       	adc	r22, r22
 b46:	77 1f       	adc	r23, r23
 b48:	88 1f       	adc	r24, r24
 b4a:	91 50       	subi	r25, 0x01	; 1
 b4c:	50 40       	sbci	r21, 0x00	; 0
 b4e:	a9 f7       	brne	.-22     	; 0xb3a <__mulsf3_pse+0x64>
 b50:	9e 3f       	cpi	r25, 0xFE	; 254
 b52:	51 05       	cpc	r21, r1
 b54:	80 f0       	brcs	.+32     	; 0xb76 <__mulsf3_pse+0xa0>
 b56:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 b5a:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>
 b5e:	5f 3f       	cpi	r21, 0xFF	; 255
 b60:	e4 f3       	brlt	.-8      	; 0xb5a <__mulsf3_pse+0x84>
 b62:	98 3e       	cpi	r25, 0xE8	; 232
 b64:	d4 f3       	brlt	.-12     	; 0xb5a <__mulsf3_pse+0x84>
 b66:	86 95       	lsr	r24
 b68:	77 95       	ror	r23
 b6a:	67 95       	ror	r22
 b6c:	b7 95       	ror	r27
 b6e:	f7 95       	ror	r31
 b70:	e7 95       	ror	r30
 b72:	9f 5f       	subi	r25, 0xFF	; 255
 b74:	c1 f7       	brne	.-16     	; 0xb66 <__mulsf3_pse+0x90>
 b76:	fe 2b       	or	r31, r30
 b78:	88 0f       	add	r24, r24
 b7a:	91 1d       	adc	r25, r1
 b7c:	96 95       	lsr	r25
 b7e:	87 95       	ror	r24
 b80:	97 f9       	bld	r25, 7
 b82:	08 95       	ret

00000b84 <_exit>:
 b84:	f8 94       	cli

00000b86 <__stop_program>:
 b86:	ff cf       	rjmp	.-2      	; 0xb86 <__stop_program>

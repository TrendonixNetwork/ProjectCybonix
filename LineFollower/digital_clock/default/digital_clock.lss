
digital_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000003d4  00000468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800078  00800078  00000480  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000af  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000487  00000000  00000000  0000054f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a7  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c2  00000000  00000000  00000b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000169  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000118  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001251  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  8a:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_command>:
}
 

void LCD_command(unsigned char cmd)
{
	LCD_DATA_PORT = cmd;
  92:	88 bb       	out	0x18, r24	; 24
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
  94:	ae 98       	cbi	0x15, 6	; 21
	LCD_CNTRL_PORT &= ~(1<<LCD_RS_PIN);
  96:	ad 98       	cbi	0x15, 5	; 21
 
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
  98:	af 9a       	sbi	0x15, 7	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_command+0xa>
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
  a0:	af 98       	cbi	0x15, 7	; 21
  a2:	85 e8       	ldi	r24, 0x85	; 133
  a4:	8a 95       	dec	r24
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_command+0x12>
	_delay_us(100);
}
  a8:	08 95       	ret

000000aa <LCD_data>:
 

void LCD_data(unsigned char data)
{
	LCD_DATA_PORT = data;
  aa:	88 bb       	out	0x18, r24	; 24
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
  ac:	ae 98       	cbi	0x15, 6	; 21
	LCD_CNTRL_PORT |= (1<<LCD_RS_PIN);
  ae:	ad 9a       	sbi	0x15, 5	; 21
 
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
  b0:	af 9a       	sbi	0x15, 7	; 21
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_data+0xa>
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
  b8:	af 98       	cbi	0x15, 7	; 21
  ba:	85 e8       	ldi	r24, 0x85	; 133
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_data+0x12>
	_delay_us(100);
}
  c0:	08 95       	ret

000000c2 <LCD_init>:
 
void LCD_init()
{
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
	LCD_CNTRL_DDR = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
	LCD_CNTRL_PORT = 0x00;
  ca:	15 ba       	out	0x15, r1	; 21
	LCD_DATA_DDR = 0xFF;
  cc:	87 bb       	out	0x17, r24	; 23
	LCD_DATA_PORT = 0x00;
  ce:	18 ba       	out	0x18, r1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	00 e1       	ldi	r16, 0x10	; 16
  d2:	17 e2       	ldi	r17, 0x27	; 39
  d4:	c8 01       	movw	r24, r16
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_init+0x14>
 
	_delay_ms(10);
	LCD_command(0x38);
  da:	88 e3       	ldi	r24, 0x38	; 56
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
	LCD_command(0x0C);
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
	LCD_command(0x01);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
  ec:	c8 01       	movw	r24, r16
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_init+0x2c>
	_delay_ms(10);
	LCD_command(0x06);
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
}
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <LCD_goto>:
 

void LCD_goto(unsigned char y, unsigned char x)
{
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	00 d0       	rcall	.+0      	; 0x104 <LCD_goto+0x6>
 104:	00 d0       	rcall	.+0      	; 0x106 <LCD_goto+0x8>
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstAddress[] = {0x80,0xC0,0x94,0xD4};
 10a:	90 e8       	ldi	r25, 0x80	; 128
 10c:	99 83       	std	Y+1, r25	; 0x01
 10e:	90 ec       	ldi	r25, 0xC0	; 192
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	94 e9       	ldi	r25, 0x94	; 148
 114:	9b 83       	std	Y+3, r25	; 0x03
 116:	94 ed       	ldi	r25, 0xD4	; 212
 118:	9c 83       	std	Y+4, r25	; 0x04
 
	LCD_command(firstAddress[y-1] + x-1);
 11a:	61 50       	subi	r22, 0x01	; 1
 11c:	fe 01       	movw	r30, r28
 11e:	e8 0f       	add	r30, r24
 120:	f1 1d       	adc	r31, r1
 122:	80 81       	ld	r24, Z
 124:	86 0f       	add	r24, r22
 126:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 12a:	80 e1       	ldi	r24, 0x10	; 16
 12c:	97 e2       	ldi	r25, 0x27	; 39
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_goto+0x30>
	_delay_ms(10);	
}
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	cf 91       	pop	r28
 13c:	df 91       	pop	r29
 13e:	08 95       	ret

00000140 <LCD_string>:
 
void LCD_string(char *string)
{
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
 148:	03 c0       	rjmp	.+6      	; 0x150 <LCD_string+0x10>
	unsigned char i;
 
	while(string[i]!=0)
	{
		LCD_data(string[i]);
 14a:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_data>
		i++;
 14e:	1f 5f       	subi	r17, 0xFF	; 255
 
void LCD_string(char *string)
{
	unsigned char i;
 
	while(string[i]!=0)
 150:	fe 01       	movw	r30, r28
 152:	e1 0f       	add	r30, r17
 154:	f1 1d       	adc	r31, r1
 156:	80 81       	ld	r24, Z
 158:	88 23       	and	r24, r24
 15a:	b9 f7       	brne	.-18     	; 0x14a <LCD_string+0xa>
	{
		LCD_data(string[i]);
		i++;
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	08 95       	ret

00000164 <main>:
 
void main()
{
	unsigned char i; 
 
    LCD_init();
 164:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_init>
	LCD_goto(1,3);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	63 e0       	ldi	r22, 0x03	; 3
 16c:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_goto>
	LCD_string("AEROFARMING");
 170:	80 e6       	ldi	r24, 0x60	; 96
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_string>
	LCD_goto(2,4);
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	64 e0       	ldi	r22, 0x04	; 4
 17c:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_goto>
	LCD_string(time);
 180:	8e e6       	ldi	r24, 0x6E	; 110
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_string>
 
	LCD_CNTRL_PORT = (1<<SET_HOUR | 1<<SET_MINUTE);
 188:	88 e1       	ldi	r24, 0x18	; 24
 18a:	85 bb       	out	0x15, r24	; 21
 
	TCCR1B = (1<<CS12|1<<WGM12);
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	8e bd       	out	0x2e, r24	; 46
	OCR1A = (15625-1);
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	9d e3       	ldi	r25, 0x3D	; 61
 194:	9b bd       	out	0x2b, r25	; 43
 196:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 1<<OCIE1A;
 198:	80 e1       	ldi	r24, 0x10	; 16
 19a:	89 bf       	out	0x39, r24	; 57
	sei();
 19c:	78 94       	sei
 19e:	24 e6       	ldi	r18, 0x64	; 100
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 
	while(1)
    {
		if(!(LCD_CNTRL_PIN & (1<<SET_HOUR)))
 1a2:	83 b3       	in	r24, 0x13	; 19
		{
			hours++;
			if(hours > 23)
				hours = 0;
		}
		if(!(LCD_CNTRL_PIN & (1<<SET_MINUTE)))
 1a4:	83 b3       	in	r24, 0x13	; 19
 1a6:	84 ec       	ldi	r24, 0xC4	; 196
 1a8:	99 e0       	ldi	r25, 0x09	; 9
 1aa:	f9 01       	movw	r30, r18
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b2:	b9 f3       	breq	.-18     	; 0x1a2 <main+0x3e>
 1b4:	fa cf       	rjmp	.-12     	; 0x1aa <main+0x46>

000001b6 <LCD_update_time>:
		LCD_data(string[i]);
		i++;
	}
}
void LCD_update_time()
{
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	1f 93       	push	r17
	unsigned char temp;
 
	LCD_goto(2,4);
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	64 e0       	ldi	r22, 0x04	; 4
 1c0:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_goto>
 
	itoa(hours/10,temp,10);
 1c4:	80 91 78 00 	lds	r24, 0x0078
 1c8:	6a e0       	ldi	r22, 0x0A	; 10
 1ca:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodqi4>
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	10 e0       	ldi	r17, 0x00	; 0
 1d2:	61 2f       	mov	r22, r17
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	4a e0       	ldi	r20, 0x0A	; 10
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	0e 94 a3 01 	call	0x346	; 0x346 <itoa>
	LCD_string(temp);
 1de:	81 2f       	mov	r24, r17
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_string>
	itoa(hours%10,temp,10);
 1e6:	80 91 78 00 	lds	r24, 0x0078
 1ea:	6a e0       	ldi	r22, 0x0A	; 10
 1ec:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodqi4>
 1f0:	89 2f       	mov	r24, r25
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	61 2f       	mov	r22, r17
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	4a e0       	ldi	r20, 0x0A	; 10
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	0e 94 a3 01 	call	0x346	; 0x346 <itoa>
	LCD_string(temp);
 200:	81 2f       	mov	r24, r17
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_string>
	LCD_string(":");
 208:	8c e6       	ldi	r24, 0x6C	; 108
 20a:	e8 2e       	mov	r14, r24
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	f8 2e       	mov	r15, r24
 210:	c7 01       	movw	r24, r14
 212:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_string>
 
	itoa(minutes/10,temp,10);
 216:	80 91 79 00 	lds	r24, 0x0079
 21a:	6a e0       	ldi	r22, 0x0A	; 10
 21c:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodqi4>
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	61 2f       	mov	r22, r17
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	4a e0       	ldi	r20, 0x0A	; 10
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	0e 94 a3 01 	call	0x346	; 0x346 <itoa>
	LCD_string(temp);
 22e:	81 2f       	mov	r24, r17
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_string>
	itoa((minutes%10),temp,10);
 236:	80 91 79 00 	lds	r24, 0x0079
 23a:	6a e0       	ldi	r22, 0x0A	; 10
 23c:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodqi4>
 240:	89 2f       	mov	r24, r25
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	61 2f       	mov	r22, r17
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	4a e0       	ldi	r20, 0x0A	; 10
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	0e 94 a3 01 	call	0x346	; 0x346 <itoa>
	LCD_string(temp);
 250:	81 2f       	mov	r24, r17
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_string>
	LCD_string(":");
 258:	c7 01       	movw	r24, r14
 25a:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_string>
 
	itoa(seconds/10,temp,10);
 25e:	80 91 7a 00 	lds	r24, 0x007A
 262:	6a e0       	ldi	r22, 0x0A	; 10
 264:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodqi4>
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	61 2f       	mov	r22, r17
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	4a e0       	ldi	r20, 0x0A	; 10
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	0e 94 a3 01 	call	0x346	; 0x346 <itoa>
	LCD_string(temp);
 276:	81 2f       	mov	r24, r17
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_string>
	itoa(seconds%10,temp,10);
 27e:	80 91 7a 00 	lds	r24, 0x007A
 282:	6a e0       	ldi	r22, 0x0A	; 10
 284:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodqi4>
 288:	89 2f       	mov	r24, r25
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	61 2f       	mov	r22, r17
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	4a e0       	ldi	r20, 0x0A	; 10
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	0e 94 a3 01 	call	0x346	; 0x346 <itoa>
	LCD_string(temp);
 298:	81 2f       	mov	r24, r17
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_string>
}
 2a0:	1f 91       	pop	r17
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	08 95       	ret

000002a8 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{		
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	seconds++;
 2ca:	80 91 7a 00 	lds	r24, 0x007A
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 7a 00 	sts	0x007A, r24
 
	if(seconds == 60)
 2d4:	8c 33       	cpi	r24, 0x3C	; 60
 2d6:	39 f4       	brne	.+14     	; 0x2e6 <__vector_6+0x3e>
	{
		seconds = 0;
 2d8:	10 92 7a 00 	sts	0x007A, r1
		minutes++;
 2dc:	80 91 79 00 	lds	r24, 0x0079
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	80 93 79 00 	sts	0x0079, r24
	}
	if(minutes == 60)
 2e6:	80 91 79 00 	lds	r24, 0x0079
 2ea:	8c 33       	cpi	r24, 0x3C	; 60
 2ec:	39 f4       	brne	.+14     	; 0x2fc <__vector_6+0x54>
	{
		minutes = 0;
 2ee:	10 92 79 00 	sts	0x0079, r1
		hours++;		
 2f2:	80 91 78 00 	lds	r24, 0x0078
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
 2f8:	80 93 78 00 	sts	0x0078, r24
	}
	if(hours > 23)
 2fc:	80 91 78 00 	lds	r24, 0x0078
 300:	88 31       	cpi	r24, 0x18	; 24
 302:	10 f0       	brcs	.+4      	; 0x308 <__vector_6+0x60>
		hours = 0;
 304:	10 92 78 00 	sts	0x0078, r1
 
	LCD_update_time();
 308:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_update_time>
}
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__udivmodqi4>:
 32e:	99 1b       	sub	r25, r25
 330:	79 e0       	ldi	r23, 0x09	; 9
 332:	04 c0       	rjmp	.+8      	; 0x33c <__udivmodqi4_ep>

00000334 <__udivmodqi4_loop>:
 334:	99 1f       	adc	r25, r25
 336:	96 17       	cp	r25, r22
 338:	08 f0       	brcs	.+2      	; 0x33c <__udivmodqi4_ep>
 33a:	96 1b       	sub	r25, r22

0000033c <__udivmodqi4_ep>:
 33c:	88 1f       	adc	r24, r24
 33e:	7a 95       	dec	r23
 340:	c9 f7       	brne	.-14     	; 0x334 <__udivmodqi4_loop>
 342:	80 95       	com	r24
 344:	08 95       	ret

00000346 <itoa>:
 346:	fb 01       	movw	r30, r22
 348:	9f 01       	movw	r18, r30
 34a:	e8 94       	clt
 34c:	42 30       	cpi	r20, 0x02	; 2
 34e:	c4 f0       	brlt	.+48     	; 0x380 <itoa+0x3a>
 350:	45 32       	cpi	r20, 0x25	; 37
 352:	b4 f4       	brge	.+44     	; 0x380 <itoa+0x3a>
 354:	4a 30       	cpi	r20, 0x0A	; 10
 356:	29 f4       	brne	.+10     	; 0x362 <itoa+0x1c>
 358:	97 fb       	bst	r25, 7
 35a:	1e f4       	brtc	.+6      	; 0x362 <itoa+0x1c>
 35c:	90 95       	com	r25
 35e:	81 95       	neg	r24
 360:	9f 4f       	sbci	r25, 0xFF	; 255
 362:	64 2f       	mov	r22, r20
 364:	77 27       	eor	r23, r23
 366:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__udivmodhi4>
 36a:	80 5d       	subi	r24, 0xD0	; 208
 36c:	8a 33       	cpi	r24, 0x3A	; 58
 36e:	0c f0       	brlt	.+2      	; 0x372 <itoa+0x2c>
 370:	89 5d       	subi	r24, 0xD9	; 217
 372:	81 93       	st	Z+, r24
 374:	cb 01       	movw	r24, r22
 376:	00 97       	sbiw	r24, 0x00	; 0
 378:	a1 f7       	brne	.-24     	; 0x362 <itoa+0x1c>
 37a:	16 f4       	brtc	.+4      	; 0x380 <itoa+0x3a>
 37c:	5d e2       	ldi	r21, 0x2D	; 45
 37e:	51 93       	st	Z+, r21
 380:	10 82       	st	Z, r1
 382:	c9 01       	movw	r24, r18
 384:	0c 94 c4 01 	jmp	0x388	; 0x388 <strrev>

00000388 <strrev>:
 388:	dc 01       	movw	r26, r24
 38a:	fc 01       	movw	r30, r24
 38c:	67 2f       	mov	r22, r23
 38e:	71 91       	ld	r23, Z+
 390:	77 23       	and	r23, r23
 392:	e1 f7       	brne	.-8      	; 0x38c <strrev+0x4>
 394:	32 97       	sbiw	r30, 0x02	; 2
 396:	04 c0       	rjmp	.+8      	; 0x3a0 <strrev+0x18>
 398:	7c 91       	ld	r23, X
 39a:	6d 93       	st	X+, r22
 39c:	70 83       	st	Z, r23
 39e:	62 91       	ld	r22, -Z
 3a0:	ae 17       	cp	r26, r30
 3a2:	bf 07       	cpc	r27, r31
 3a4:	c8 f3       	brcs	.-14     	; 0x398 <strrev+0x10>
 3a6:	08 95       	ret

000003a8 <__udivmodhi4>:
 3a8:	aa 1b       	sub	r26, r26
 3aa:	bb 1b       	sub	r27, r27
 3ac:	51 e1       	ldi	r21, 0x11	; 17
 3ae:	07 c0       	rjmp	.+14     	; 0x3be <__udivmodhi4_ep>

000003b0 <__udivmodhi4_loop>:
 3b0:	aa 1f       	adc	r26, r26
 3b2:	bb 1f       	adc	r27, r27
 3b4:	a6 17       	cp	r26, r22
 3b6:	b7 07       	cpc	r27, r23
 3b8:	10 f0       	brcs	.+4      	; 0x3be <__udivmodhi4_ep>
 3ba:	a6 1b       	sub	r26, r22
 3bc:	b7 0b       	sbc	r27, r23

000003be <__udivmodhi4_ep>:
 3be:	88 1f       	adc	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	5a 95       	dec	r21
 3c4:	a9 f7       	brne	.-22     	; 0x3b0 <__udivmodhi4_loop>
 3c6:	80 95       	com	r24
 3c8:	90 95       	com	r25
 3ca:	bc 01       	movw	r22, r24
 3cc:	cd 01       	movw	r24, r26
 3ce:	08 95       	ret

000003d0 <_exit>:
 3d0:	f8 94       	cli

000003d2 <__stop_program>:
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stop_program>

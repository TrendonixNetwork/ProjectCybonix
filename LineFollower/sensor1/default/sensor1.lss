
sensor1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009a  00000000  00000000  0000012b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004a  00000000  00000000  000001c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000b8  00000000  00000000  0000020f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000080  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

{

int s0=0,s1=0, s2=0, s3=0;

DDRB=0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
DDRA=0x00;
  70:	1a ba       	out	0x1a, r1	; 26


while(1)
    {
PORTA= (1<<PA7);
  72:	50 e8       	ldi	r21, 0x80	; 128
	 s4=0;
	}*/

	 if ((s0==0x01)&&(s1==0x02)&&(s2==0x04)&&(s3==0x08))
	{
		PORTB=0xff;//turn right
  74:	4f ef       	ldi	r20, 0xFF	; 255
DDRA=0x00;


while(1)
    {
PORTA= (1<<PA7);
  76:	5b bb       	out	0x1b, r21	; 27
	   s0=(PINA&0x01);
  78:	89 b3       	in	r24, 0x19	; 25
	   s1=(PINA&0x02);
  7a:	39 b3       	in	r19, 0x19	; 25
	   s2=(PINA&0x04);
  7c:	29 b3       	in	r18, 0x19	; 25
       s3=(PINA&0x08);
  7e:	99 b3       	in	r25, 0x19	; 25
	 s2=0;
	 s3=0;
	 s4=0;
	}*/

	 if ((s0==0x01)&&(s1==0x02)&&(s2==0x04)&&(s3==0x08))
  80:	80 ff       	sbrs	r24, 0
  82:	08 c0       	rjmp	.+16     	; 0x94 <main+0x28>
  84:	31 ff       	sbrs	r19, 1
  86:	06 c0       	rjmp	.+12     	; 0x94 <main+0x28>
  88:	22 ff       	sbrs	r18, 2
  8a:	04 c0       	rjmp	.+8      	; 0x94 <main+0x28>
  8c:	93 ff       	sbrs	r25, 3
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x28>
	{
		PORTB=0xff;//turn right
  90:	48 bb       	out	0x18, r20	; 24
  92:	f1 cf       	rjmp	.-30     	; 0x76 <main+0xa>
	s3=0;
	}*/

	else

	PORTB=0x00;
  94:	18 ba       	out	0x18, r1	; 24
  96:	ef cf       	rjmp	.-34     	; 0x76 <main+0xa>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
